a:23:{s:23:"authentication_provider";a:4:{s:5:"label";s:23:"Authentication provider";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:58:"Drupal\Core\Authentication\AuthenticationProviderInterface";s:7:"methods";a:2:{s:7:"applies";a:3:{s:4:"name";s:7:"applies";s:11:"declaration";s:76:"public function applies(\Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:70:"Checks whether suitable authentication credentials are on the request.";}s:12:"authenticate";a:3:{s:4:"name";s:12:"authenticate";s:11:"declaration";s:81:"public function authenticate(\Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:23:"Authenticates the user.";}}}s:18:"breadcrumb_builder";a:4:{s:5:"label";s:18:"Breadcrumb builder";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:49:"Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface";s:7:"methods";a:2:{s:7:"applies";a:3:{s:4:"name";s:7:"applies";s:11:"declaration";s:79:"public function applies(\Drupal\Core\Routing\RouteMatchInterface $route_match);";s:11:"description";s:71:"Whether this breadcrumb builder should be used to build the breadcrumb.";}s:5:"build";a:3:{s:4:"name";s:5:"build";s:11:"declaration";s:77:"public function build(\Drupal\Core\Routing\RouteMatchInterface $route_match);";s:11:"description";s:22:"Builds the breadcrumb.";}}}s:22:"cache_tags_invalidator";a:4:{s:5:"label";s:22:"Cache tags invalidator";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:47:"Drupal\Core\Cache\CacheTagsInvalidatorInterface";s:7:"methods";a:1:{s:14:"invalidateTags";a:3:{s:4:"name";s:14:"invalidateTags";s:11:"declaration";s:44:"public function invalidateTags(array $tags);";s:11:"description";s:60:"Marks cache items with any of the specified tags as invalid.";}}}s:23:"config.factory.override";a:4:{s:5:"label";s:23:"Config factory override";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:49:"Drupal\Core\Config\ConfigFactoryOverrideInterface";s:7:"methods";a:4:{s:13:"loadOverrides";a:3:{s:4:"name";s:13:"loadOverrides";s:11:"declaration";s:38:"public function loadOverrides($names);";s:11:"description";s:25:"Returns config overrides.";}s:14:"getCacheSuffix";a:3:{s:4:"name";s:14:"getCacheSuffix";s:11:"declaration";s:33:"public function getCacheSuffix();";s:11:"description";s:60:"The string to append to the configuration static cache name.";}s:18:"createConfigObject";a:3:{s:4:"name";s:18:"createConfigObject";s:11:"declaration";s:94:"public function createConfigObject($name, $collection = StorageInterface::DEFAULT_COLLECTION);";s:11:"description";s:74:"Creates a configuration object for use during install and synchronization.";}s:20:"getCacheableMetadata";a:3:{s:4:"name";s:20:"getCacheableMetadata";s:11:"declaration";s:44:"public function getCacheableMetadata($name);";s:11:"description";s:75:"Gets the cacheability metadata associated with the config factory override.";}}}s:33:"dynamic_page_cache_request_policy";a:4:{s:5:"label";s:33:"Dynamic page cache request policy";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:44:"Drupal\Core\PageCache\RequestPolicyInterface";s:7:"methods";a:1:{s:5:"check";a:3:{s:4:"name";s:5:"check";s:11:"declaration";s:74:"public function check(\Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:65:"Determines whether delivery of a cached page should be attempted.";}}}s:34:"dynamic_page_cache_response_policy";a:4:{s:5:"label";s:34:"Dynamic page cache response policy";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:45:"Drupal\Core\PageCache\ResponsePolicyInterface";s:7:"methods";a:1:{s:5:"check";a:3:{s:4:"name";s:5:"check";s:11:"declaration";s:128:"public function check(\Symfony\Component\HttpFoundation\Response $response, \Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:59:"Determines whether it is save to store a page in the cache.";}}}s:16:"event_subscriber";a:3:{s:5:"label";s:16:"Event subscriber";s:9:"interface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:7:"methods";a:1:{s:19:"getSubscribedEvents";a:3:{s:4:"name";s:19:"getSubscribedEvents";s:11:"declaration";s:45:"public static function getSubscribedEvents();";s:11:"description";s:67:"Returns an array of event names this subscriber wants to listen to.";}}}s:6:"logger";a:4:{s:5:"label";s:6:"Logger";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:23:"Psr\Log\LoggerInterface";s:7:"methods";a:9:{s:9:"emergency";a:3:{s:4:"name";s:9:"emergency";s:11:"declaration";s:82:"public function emergency(string|\Stringable $message, array $context = []): void;";s:11:"description";s:19:"System is unusable.";}s:5:"alert";a:3:{s:4:"name";s:5:"alert";s:11:"declaration";s:78:"public function alert(string|\Stringable $message, array $context = []): void;";s:11:"description";s:33:"Action must be taken immediately.";}s:8:"critical";a:3:{s:4:"name";s:8:"critical";s:11:"declaration";s:81:"public function critical(string|\Stringable $message, array $context = []): void;";s:11:"description";s:20:"Critical conditions.";}s:5:"error";a:3:{s:4:"name";s:5:"error";s:11:"declaration";s:78:"public function error(string|\Stringable $message, array $context = []): void;";s:11:"description";s:72:"Runtime errors that do not require immediate action but should typically";}s:7:"warning";a:3:{s:4:"name";s:7:"warning";s:11:"declaration";s:80:"public function warning(string|\Stringable $message, array $context = []): void;";s:11:"description";s:44:"Exceptional occurrences that are not errors.";}s:6:"notice";a:3:{s:4:"name";s:6:"notice";s:11:"declaration";s:79:"public function notice(string|\Stringable $message, array $context = []): void;";s:11:"description";s:30:"Normal but significant events.";}s:4:"info";a:3:{s:4:"name";s:4:"info";s:11:"declaration";s:77:"public function info(string|\Stringable $message, array $context = []): void;";s:11:"description";s:19:"Interesting events.";}s:5:"debug";a:3:{s:4:"name";s:5:"debug";s:11:"declaration";s:78:"public function debug(string|\Stringable $message, array $context = []): void;";s:11:"description";s:27:"Detailed debug information.";}s:3:"log";a:3:{s:4:"name";s:3:"log";s:11:"declaration";s:84:"public function log($level, string|\Stringable $message, array $context = []): void;";s:11:"description";s:29:"Logs with an arbitrary level.";}}}s:17:"mime_type_guesser";a:4:{s:5:"label";s:17:"Mime type guesser";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:47:"Symfony\Component\Mime\MimeTypeGuesserInterface";s:7:"methods";a:2:{s:18:"isGuesserSupported";a:3:{s:4:"name";s:18:"isGuesserSupported";s:11:"declaration";s:43:"public function isGuesserSupported(): bool;";s:11:"description";s:42:"Returns true if this guesser is supported.";}s:13:"guessMimeType";a:3:{s:4:"name";s:13:"guessMimeType";s:11:"declaration";s:53:"public function guessMimeType(string $path): ?string;";s:11:"description";s:54:"Guesses the MIME type of the file with the given path.";}}}s:34:"module_install.uninstall_validator";a:4:{s:5:"label";s:34:"Module install uninstall validator";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:55:"Drupal\Core\Extension\ModuleUninstallValidatorInterface";s:7:"methods";a:1:{s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:34:"public function validate($module);";s:11:"description";s:55:"Determines the reasons a module can not be uninstalled.";}}}s:25:"page_cache_request_policy";a:4:{s:5:"label";s:25:"Page cache request policy";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:44:"Drupal\Core\PageCache\RequestPolicyInterface";s:7:"methods";a:1:{s:5:"check";a:3:{s:4:"name";s:5:"check";s:11:"declaration";s:74:"public function check(\Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:65:"Determines whether delivery of a cached page should be attempted.";}}}s:26:"page_cache_response_policy";a:4:{s:5:"label";s:26:"Page cache response policy";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:45:"Drupal\Core\PageCache\ResponsePolicyInterface";s:7:"methods";a:1:{s:5:"check";a:3:{s:4:"name";s:5:"check";s:11:"declaration";s:128:"public function check(\Symfony\Component\HttpFoundation\Response $response, \Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:59:"Determines whether it is save to store a page in the cache.";}}}s:14:"paramconverter";a:4:{s:5:"label";s:14:"Paramconverter";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:50:"Drupal\Core\ParamConverter\ParamConverterInterface";s:7:"methods";a:2:{s:7:"convert";a:3:{s:4:"name";s:7:"convert";s:11:"declaration";s:69:"public function convert($value, $definition, $name, array $defaults);";s:11:"description";s:55:"Converts path variables to their corresponding objects.";}s:7:"applies";a:3:{s:4:"name";s:7:"applies";s:11:"declaration";s:85:"public function applies($definition, $name, \Symfony\Component\Routing\Route $route);";s:11:"description";s:69:"Determines if the converter applies to a specific route and variable.";}}}s:22:"path_processor_inbound";a:4:{s:5:"label";s:22:"Path processor inbound";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:55:"Drupal\Core\PathProcessor\InboundPathProcessorInterface";s:7:"methods";a:1:{s:14:"processInbound";a:3:{s:4:"name";s:14:"processInbound";s:11:"declaration";s:90:"public function processInbound($path, \Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:27:"Processes the inbound path.";}}}s:23:"path_processor_outbound";a:4:{s:5:"label";s:23:"Path processor outbound";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:56:"Drupal\Core\PathProcessor\OutboundPathProcessorInterface";s:7:"methods";a:1:{s:15:"processOutbound";a:3:{s:4:"name";s:15:"processOutbound";s:11:"declaration";s:182:"public function processOutbound($path, &$options = [], \Symfony\Component\HttpFoundation\Request $request = NULL, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata = NULL);";s:11:"description";s:28:"Processes the outbound path.";}}}s:20:"placeholder_strategy";a:4:{s:5:"label";s:20:"Placeholder strategy";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:59:"Drupal\Core\Render\Placeholder\PlaceholderStrategyInterface";s:7:"methods";a:1:{s:19:"processPlaceholders";a:3:{s:4:"name";s:19:"processPlaceholders";s:11:"declaration";s:57:"public function processPlaceholders(array $placeholders);";s:11:"description";s:64:"Processes placeholders to render them with different strategies.";}}}s:14:"route_enhancer";a:4:{s:5:"label";s:14:"Route enhancer";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:37:"Drupal\Core\Routing\EnhancerInterface";s:7:"methods";a:1:{s:7:"enhance";a:3:{s:4:"name";s:7:"enhance";s:11:"declaration";s:93:"public function enhance(array $defaults, \Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:65:"Updates the defaults for a route definition based on the request.";}}}s:12:"route_filter";a:4:{s:5:"label";s:12:"Route filter";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:35:"Drupal\Core\Routing\FilterInterface";s:7:"methods";a:1:{s:6:"filter";a:3:{s:4:"name";s:6:"filter";s:11:"declaration";s:131:"public function filter(\Symfony\Component\Routing\RouteCollection $collection, \Symfony\Component\HttpFoundation\Request $request);";s:11:"description";s:71:"Filters the route collection against a request and returns all matching";}}}s:24:"route_processor_outbound";a:4:{s:5:"label";s:24:"Route processor outbound";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:58:"Drupal\Core\RouteProcessor\OutboundRouteProcessorInterface";s:7:"methods";a:1:{s:15:"processOutbound";a:3:{s:4:"name";s:15:"processOutbound";s:11:"declaration";s:174:"public function processOutbound($route_name, \Symfony\Component\Routing\Route $route, array &$parameters, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata = NULL);";s:11:"description";s:29:"Processes the outbound route.";}}}s:11:"session_bag";a:4:{s:5:"label";s:11:"Session bag";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:7:"methods";a:4:{s:7:"getName";a:3:{s:4:"name";s:7:"getName";s:11:"declaration";s:34:"public function getName(): string;";s:11:"description";s:21:"Gets this bag's name.";}s:10:"initialize";a:3:{s:4:"name";s:10:"initialize";s:11:"declaration";s:42:"public function initialize(array &$array);";s:11:"description";s:20:"Initializes the Bag.";}s:13:"getStorageKey";a:3:{s:4:"name";s:13:"getStorageKey";s:11:"declaration";s:40:"public function getStorageKey(): string;";s:11:"description";s:34:"Gets the storage key for this bag.";}s:5:"clear";a:3:{s:4:"name";s:5:"clear";s:11:"declaration";s:31:"public function clear(): mixed;";s:11:"description";s:25:"Clears out data from bag.";}}}s:17:"string_translator";a:4:{s:5:"label";s:17:"String translator";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:60:"Drupal\Core\StringTranslation\Translator\TranslatorInterface";s:7:"methods";a:2:{s:20:"getStringTranslation";a:3:{s:4:"name";s:20:"getStringTranslation";s:11:"declaration";s:67:"public function getStringTranslation($langcode, $string, $context);";s:11:"description";s:43:"Retrieves English string to given language.";}s:5:"reset";a:3:{s:4:"name";s:5:"reset";s:11:"declaration";s:24:"public function reset();";s:11:"description";s:25:"Resets translation cache.";}}}s:16:"theme_negotiator";a:4:{s:5:"label";s:16:"Theme negotiator";s:14:"collector_type";s:20:"service_id_collector";s:9:"interface";s:42:"Drupal\Core\Theme\ThemeNegotiatorInterface";s:7:"methods";a:2:{s:7:"applies";a:3:{s:4:"name";s:7:"applies";s:11:"declaration";s:79:"public function applies(\Drupal\Core\Routing\RouteMatchInterface $route_match);";s:11:"description";s:62:"Whether this theme negotiator should be used to set the theme.";}s:20:"determineActiveTheme";a:3:{s:4:"name";s:20:"determineActiveTheme";s:11:"declaration";s:92:"public function determineActiveTheme(\Drupal\Core\Routing\RouteMatchInterface $route_match);";s:11:"description";s:43:"Determine the active theme for the request.";}}}s:14:"twig.extension";a:4:{s:5:"label";s:14:"Twig extension";s:14:"collector_type";s:17:"service_collector";s:9:"interface";s:33:"Twig\Extension\ExtensionInterface";s:7:"methods";a:6:{s:15:"getTokenParsers";a:3:{s:4:"name";s:15:"getTokenParsers";s:11:"declaration";s:34:"public function getTokenParsers();";s:11:"description";s:63:"Returns the token parser instances to add to the existing list.";}s:15:"getNodeVisitors";a:3:{s:4:"name";s:15:"getNodeVisitors";s:11:"declaration";s:34:"public function getNodeVisitors();";s:11:"description";s:63:"Returns the node visitor instances to add to the existing list.";}s:10:"getFilters";a:3:{s:4:"name";s:10:"getFilters";s:11:"declaration";s:29:"public function getFilters();";s:11:"description";s:54:"Returns a list of filters to add to the existing list.";}s:8:"getTests";a:3:{s:4:"name";s:8:"getTests";s:11:"declaration";s:27:"public function getTests();";s:11:"description";s:52:"Returns a list of tests to add to the existing list.";}s:12:"getFunctions";a:3:{s:4:"name";s:12:"getFunctions";s:11:"declaration";s:31:"public function getFunctions();";s:11:"description";s:56:"Returns a list of functions to add to the existing list.";}s:12:"getOperators";a:3:{s:4:"name";s:12:"getOperators";s:11:"declaration";s:31:"public function getOperators();";s:11:"description";s:56:"Returns a list of operators to add to the existing list.";}}}}