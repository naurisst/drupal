a:51:{s:6:"action";a:17:{s:7:"type_id";s:6:"action";s:10:"service_id";s:21:"plugin.manager.action";s:18:"service_class_name";s:32:"Drupal\Core\Action\ActionManager";s:27:"service_component_namespace";s:18:"Drupal\Core\Action";s:10:"type_label";s:6:"action";s:15:"alter_hook_name";s:17:"action_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:13:"Plugin/Action";s:16:"plugin_interface";s:34:"Drupal\Core\Action\ActionInterface";s:33:"plugin_definition_annotation_name";s:29:"Drupal\Core\Annotation\Action";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:29:"Drupal\Core\Action\ActionBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:45:"The human-readable name of the action plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:23:"confirm_form_route_name";a:3:{s:4:"name";s:23:"confirm_form_route_name";s:11:"description";s:55:"The route name for a confirmation form for this action.";s:4:"type";s:6:"string";}s:4:"type";a:3:{s:4:"name";s:4:"type";s:11:"description";s:40:"The entity type the action can apply to.";s:4:"type";s:6:"string";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:63:"The category under which the action should be listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:2:{s:15:"executeMultiple";a:3:{s:4:"name";s:15:"executeMultiple";s:11:"declaration";s:48:"public function executeMultiple(array $objects);";s:11:"description";s:44:"Executes the plugin for an array of objects.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:114:"public function access($object, \Drupal\Core\Session\AccountInterface $account = NULL, $return_as_object = FALSE);";s:11:"description";s:21:"Checks object access.";}}}s:8:"archiver";a:18:{s:7:"type_id";s:8:"archiver";s:10:"service_id";s:23:"plugin.manager.archiver";s:18:"service_class_name";s:36:"Drupal\Core\Archiver\ArchiverManager";s:27:"service_component_namespace";s:20:"Drupal\Core\Archiver";s:10:"type_label";s:8:"archiver";s:15:"alter_hook_name";s:19:"archiver_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:15:"Plugin/Archiver";s:16:"plugin_interface";s:38:"Drupal\Core\Archiver\ArchiverInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\Core\Archiver\Annotation\Archiver";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:24:"Drupal\Core\Archiver\Tar";s:17:"base_class_has_di";b:0;s:28:"constructor_fixed_parameters";a:1:{i:0;a:3:{s:10:"extraction";s:27:"$configuration['filepath'])";s:4:"type";s:6:"string";s:4:"name";s:9:"file_path";}}s:17:"plugin_properties";a:4:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The archiver plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:47:"The human-readable name of the archiver plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"The description of the archiver plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"extensions";a:3:{s:4:"name";s:10:"extensions";s:11:"description";s:47:"An array of valid extensions for this archiver.";s:4:"type";s:5:"array";}}s:24:"plugin_interface_methods";a:4:{s:3:"add";a:3:{s:4:"name";s:3:"add";s:11:"declaration";s:32:"public function add($file_path);";s:11:"description";s:52:"Adds the specified file or directory to the archive.";}s:6:"remove";a:3:{s:4:"name";s:6:"remove";s:11:"declaration";s:30:"public function remove($path);";s:11:"description";s:44:"Removes the specified file from the archive.";}s:7:"extract";a:3:{s:4:"name";s:7:"extract";s:11:"declaration";s:50:"public function extract($path, array $files = []);";s:11:"description";s:61:"Extracts multiple files in the archive to the specified path.";}s:12:"listContents";a:3:{s:4:"name";s:12:"listContents";s:11:"declaration";s:31:"public function listContents();";s:11:"description";s:31:"Lists all files in the archive.";}}}s:5:"block";a:17:{s:7:"type_id";s:5:"block";s:10:"service_id";s:20:"plugin.manager.block";s:18:"service_class_name";s:30:"Drupal\Core\Block\BlockManager";s:27:"service_component_namespace";s:17:"Drupal\Core\Block";s:10:"type_label";s:5:"block";s:15:"alter_hook_name";s:11:"block_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:12:"Plugin/Block";s:16:"plugin_interface";s:38:"Drupal\Core\Block\BlockPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\Core\Block\Annotation\Block";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:27:"Drupal\Core\Block\BlockBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:4:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:11:"admin_label";a:3:{s:4:"name";s:11:"admin_label";s:11:"description";s:38:"The administrative label of the block.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:60:"The category in the admin UI where the block will be listed.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:19:"context_definitions";a:3:{s:4:"name";s:19:"context_definitions";s:11:"description";s:74:"An array of context definitions describing the context used by the plugin.";s:4:"type";s:43:"\Drupal\Core\Annotation\ContextDefinition[]";}}s:24:"plugin_interface_methods";a:14:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:36:"Returns the user-facing block label.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:98:"public function access(\Drupal\Core\Session\AccountInterface $account, $return_as_object = FALSE);";s:11:"description";s:44:"Indicates whether the block should be shown.";}s:5:"build";a:3:{s:4:"name";s:5:"build";s:11:"declaration";s:24:"public function build();";s:11:"description";s:62:"Builds and returns the renderable array for this block plugin.";}s:21:"setConfigurationValue";a:3:{s:4:"name";s:21:"setConfigurationValue";s:11:"declaration";s:52:"public function setConfigurationValue($key, $value);";s:11:"description";s:46:"Sets a particular value in the block settings.";}s:9:"blockForm";a:3:{s:4:"name";s:9:"blockForm";s:11:"declaration";s:83:"public function blockForm($form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:70:"Returns the configuration form elements specific to this block plugin.";}s:13:"blockValidate";a:3:{s:4:"name";s:13:"blockValidate";s:11:"declaration";s:87:"public function blockValidate($form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:55:"Adds block type-specific validation for the block form.";}s:11:"blockSubmit";a:3:{s:4:"name";s:11:"blockSubmit";s:11:"declaration";s:85:"public function blockSubmit($form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:64:"Adds block type-specific submission handling for the block form.";}s:24:"getMachineNameSuggestion";a:3:{s:4:"name";s:24:"getMachineNameSuggestion";s:11:"declaration";s:43:"public function getMachineNameSuggestion();";s:11:"description";s:62:"Suggests a machine name to identify an instance of this block.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}}s:10:"breakpoint";a:15:{s:7:"type_id";s:10:"breakpoint";s:10:"service_id";s:18:"breakpoint.manager";s:18:"service_class_name";s:35:"Drupal\breakpoint\BreakpointManager";s:27:"service_component_namespace";s:17:"Drupal\breakpoint";s:10:"type_label";s:10:"breakpoint";s:15:"alter_hook_name";s:17:"breakpoints_alter";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:11:"breakpoints";s:15:"yaml_properties";a:6:{s:5:"label";s:0:"";s:10:"mediaQuery";s:0:"";s:6:"weight";i:0;s:11:"multipliers";a:0:{}s:5:"group";s:0:"";s:5:"class";s:28:"Drupal\breakpoint\Breakpoint";}s:18:"annotation_id_only";N;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:16:"ckeditor5.plugin";a:15:{s:7:"type_id";s:16:"ckeditor5.plugin";s:10:"service_id";s:31:"plugin.manager.ckeditor5.plugin";s:18:"service_class_name";s:46:"Drupal\ckeditor5\Plugin\CKEditor5PluginManager";s:27:"service_component_namespace";s:16:"Drupal\ckeditor5";s:10:"type_label";s:16:"ckeditor5.plugin";s:15:"alter_hook_name";s:27:"ckeditor5_plugin_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:22:"Plugin/CKEditor5Plugin";s:16:"plugin_interface";s:48:"Drupal\ckeditor5\Plugin\CKEditor5PluginInterface";s:33:"plugin_definition_annotation_name";s:43:"Drupal\ckeditor5\Annotation\CKEditor5Plugin";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:9:"ckeditor5";a:3:{s:4:"name";s:9:"ckeditor5";s:11:"description";s:48:"The CKEditor 5 aspects of the plugin definition.";s:4:"type";s:62:"\Drupal\ckeditor5\Annotation\CKEditor5AspectsOfCKEditor5Plugin";}s:6:"drupal";a:3:{s:4:"name";s:6:"drupal";s:11:"description";s:44:"The Drupal aspects of the plugin definition.";s:4:"type";s:59:"\Drupal\ckeditor5\Annotation\DrupalAspectsOfCKEditor5Plugin";}}s:24:"plugin_interface_methods";a:1:{s:22:"getDynamicPluginConfig";a:3:{s:4:"name";s:22:"getDynamicPluginConfig";s:11:"declaration";s:115:"public function getDynamicPluginConfig(array $static_plugin_config, \Drupal\editor\EditorInterface $editor): array;";s:11:"description";s:51:"Allows a plugin to modify its static configuration.";}}}s:9:"condition";a:17:{s:7:"type_id";s:9:"condition";s:10:"service_id";s:24:"plugin.manager.condition";s:18:"service_class_name";s:38:"Drupal\Core\Condition\ConditionManager";s:27:"service_component_namespace";s:21:"Drupal\Core\Condition";s:10:"type_label";s:9:"condition";s:15:"alter_hook_name";s:20:"condition_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:16:"Plugin/Condition";s:16:"plugin_interface";s:40:"Drupal\Core\Condition\ConditionInterface";s:33:"plugin_definition_annotation_name";s:42:"Drupal\Core\Condition\Annotation\Condition";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:41:"Drupal\Core\Condition\ConditionPluginBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:24:"The condition plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:41:"The human-readable name of the condition.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:6:"module";a:3:{s:4:"name";s:6:"module";s:11:"description";s:42:"The name of the module providing the type.";s:4:"type";s:6:"string";}s:19:"context_definitions";a:3:{s:4:"name";s:19:"context_definitions";s:11:"description";s:74:"An array of context definitions describing the context used by the plugin.";s:4:"type";s:43:"\Drupal\Core\Annotation\ContextDefinition[]";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:63:"The category under which the condition should listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:10:{s:9:"isNegated";a:3:{s:4:"name";s:9:"isNegated";s:11:"declaration";s:28:"public function isNegated();";s:11:"description";s:52:"Determines whether condition result will be negated.";}s:8:"evaluate";a:3:{s:4:"name";s:8:"evaluate";s:11:"declaration";s:27:"public function evaluate();";s:11:"description";s:62:"Evaluates the condition and returns TRUE or FALSE accordingly.";}s:7:"summary";a:3:{s:4:"name";s:7:"summary";s:11:"declaration";s:26:"public function summary();";s:11:"description";s:67:"Provides a human readable summary of the condition's configuration.";}s:20:"setExecutableManager";a:3:{s:4:"name";s:20:"setExecutableManager";s:11:"declaration";s:108:"public function setExecutableManager(\Drupal\Core\Executable\ExecutableManagerInterface $executableManager);";s:11:"description";s:34:"Sets the executable manager class.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}}s:12:"config.typed";a:15:{s:7:"type_id";s:12:"config.typed";s:10:"service_id";s:12:"config.typed";s:18:"service_class_name";s:37:"Drupal\Core\Config\TypedConfigManager";s:27:"service_component_namespace";s:18:"Drupal\Core\Config";s:10:"type_label";s:12:"config.typed";s:15:"alter_hook_name";s:24:"config_schema_info_alter";s:9:"discovery";s:47:"Drupal\Core\Config\Schema\ConfigSchemaDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";N;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:12:"devel_dumper";a:17:{s:7:"type_id";s:12:"devel_dumper";s:10:"service_id";s:27:"plugin.manager.devel_dumper";s:18:"service_class_name";s:37:"Drupal\devel\DevelDumperPluginManager";s:27:"service_component_namespace";s:12:"Drupal\devel";s:10:"type_label";s:12:"devel_dumper";s:15:"alter_hook_name";s:23:"devel_dumper_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:19:"Plugin/Devel/Dumper";s:16:"plugin_interface";s:33:"Drupal\devel\DevelDumperInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\devel\Annotation\DevelDumper";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:28:"Drupal\devel\DevelDumperBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:2:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:48:"The human-readable name of the DevelDumper type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:44:"A short description of the DevelDumper type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:4:{s:4:"dump";a:3:{s:4:"name";s:4:"dump";s:11:"declaration";s:43:"public function dump($input, $name = NULL);";s:11:"description";s:35:"Dumps information about a variable.";}s:6:"export";a:3:{s:4:"name";s:6:"export";s:11:"declaration";s:45:"public function export($input, $name = NULL);";s:11:"description";s:46:"Returns a string representation of a variable.";}s:18:"exportAsRenderable";a:3:{s:4:"name";s:18:"exportAsRenderable";s:11:"declaration";s:57:"public function exportAsRenderable($input, $name = NULL);";s:11:"description";s:72:"Returns a string representation of a variable wrapped in a render array.";}s:17:"checkRequirements";a:3:{s:4:"name";s:17:"checkRequirements";s:11:"declaration";s:43:"public static function checkRequirements();";s:11:"description";s:53:"Checks if requirements for this plugin are satisfied.";}}}s:13:"develgenerate";a:17:{s:7:"type_id";s:13:"develgenerate";s:10:"service_id";s:28:"plugin.manager.develgenerate";s:18:"service_class_name";s:48:"Drupal\devel_generate\DevelGeneratePluginManager";s:27:"service_component_namespace";s:21:"Drupal\devel_generate";s:10:"type_label";s:13:"develgenerate";s:15:"alter_hook_name";s:25:"devel_generate_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:20:"Plugin/DevelGenerate";s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";s:46:"Drupal\devel_generate\Annotation\DevelGenerate";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:39:"Drupal\devel_generate\DevelGenerateBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:7:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:50:"The human-readable name of the DevelGenerate type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:46:"A short description of the DevelGenerate type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:3:"url";a:3:{s:4:"name";s:3:"url";s:11:"description";s:41:"A url to access the plugin settings form.";s:4:"type";s:6:"string";}s:10:"permission";a:3:{s:4:"name";s:10:"permission";s:11:"description";s:59:"The permission required to access the plugin settings form.";s:4:"type";s:6:"string";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:36:"The name of the DevelGenerate class.";s:4:"type";s:6:"string";}s:8:"settings";a:3:{s:4:"name";s:8:"settings";s:11:"description";s:62:"An array of settings passed to the DevelGenerate settingsForm.";s:4:"type";s:5:"array";}s:12:"dependencies";a:3:{s:4:"name";s:12:"dependencies";s:11:"description";s:72:"Modules that should be enabled in order to make the plugin discoverable.";s:4:"type";s:5:"array";}}s:24:"plugin_interface_methods";a:0:{}}s:15:"display_variant";a:17:{s:7:"type_id";s:15:"display_variant";s:10:"service_id";s:30:"plugin.manager.display_variant";s:18:"service_class_name";s:34:"Drupal\Core\Display\VariantManager";s:27:"service_component_namespace";s:19:"Drupal\Core\Display";s:10:"type_label";s:15:"display_variant";s:15:"alter_hook_name";s:28:"display_variant_plugin_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:21:"Plugin/DisplayVariant";s:16:"plugin_interface";s:36:"Drupal\Core\Display\VariantInterface";s:33:"plugin_definition_annotation_name";s:45:"Drupal\Core\Display\Annotation\DisplayVariant";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\Core\Display\VariantBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:11:"admin_label";a:3:{s:4:"name";s:11:"admin_label";s:11:"description";s:25:"The administrative label.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:13:{s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:46:"Returns the user-facing display variant label.";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:29:"public function adminLabel();";s:11:"description";s:47:"Returns the admin-facing display variant label.";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"declaration";s:21:"public function id();";s:11:"description";s:46:"Returns the unique ID for the display variant.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:42:"Returns the weight of the display variant.";}s:9:"setWeight";a:3:{s:4:"name";s:9:"setWeight";s:11:"declaration";s:35:"public function setWeight($weight);";s:11:"description";s:39:"Sets the weight of the display variant.";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:78:"public function access(\Drupal\Core\Session\AccountInterface $account = NULL);";s:11:"description";s:49:"Determines if this display variant is accessible.";}s:5:"build";a:3:{s:4:"name";s:5:"build";s:11:"declaration";s:24:"public function build();";s:11:"description";s:64:"Builds and returns the renderable array for the display variant.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}}s:6:"editor";a:17:{s:7:"type_id";s:6:"editor";s:10:"service_id";s:21:"plugin.manager.editor";s:18:"service_class_name";s:34:"Drupal\editor\Plugin\EditorManager";s:27:"service_component_namespace";s:13:"Drupal\editor";s:10:"type_label";s:6:"editor";s:15:"alter_hook_name";s:17:"editor_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:13:"Plugin/Editor";s:16:"plugin_interface";s:42:"Drupal\editor\Plugin\EditorPluginInterface";s:33:"plugin_definition_annotation_name";s:31:"Drupal\editor\Annotation\Editor";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\editor\Plugin\EditorBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:45:"The human-readable name of the editor plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:26:"supports_content_filtering";a:3:{s:4:"name";s:26:"supports_content_filtering";s:11:"description";s:61:"Whether the editor supports "allowed content only" filtering.";s:4:"type";s:4:"bool";}s:23:"supports_inline_editing";a:3:{s:4:"name";s:23:"supports_inline_editing";s:11:"description";s:75:"Whether the editor supports the inline editing provided by the Edit module.";s:4:"type";s:4:"bool";}s:11:"is_xss_safe";a:3:{s:4:"name";s:11:"is_xss_safe";s:11:"description";s:58:"Whether this text editor is not vulnerable to XSS attacks.";s:4:"type";s:4:"bool";}s:23:"supported_element_types";a:3:{s:4:"name";s:23:"supported_element_types";s:11:"description";s:50:"A list of element types this text editor supports.";s:4:"type";s:8:"string[]";}}s:24:"plugin_interface_methods";a:6:{s:18:"getDefaultSettings";a:3:{s:4:"name";s:18:"getDefaultSettings";s:11:"declaration";s:37:"public function getDefaultSettings();";s:11:"description";s:63:"Returns the default settings for this configurable text editor.";}s:13:"getJSSettings";a:3:{s:4:"name";s:13:"getJSSettings";s:11:"declaration";s:68:"public function getJSSettings(\Drupal\editor\Entity\Editor $editor);";s:11:"description";s:43:"Returns JavaScript settings to be attached.";}s:12:"getLibraries";a:3:{s:4:"name";s:12:"getLibraries";s:11:"declaration";s:67:"public function getLibraries(\Drupal\editor\Entity\Editor $editor);";s:11:"description";s:33:"Returns libraries to be attached.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}}}s:12:"element_info";a:17:{s:7:"type_id";s:12:"element_info";s:10:"service_id";s:27:"plugin.manager.element_info";s:18:"service_class_name";s:37:"Drupal\Core\Render\ElementInfoManager";s:27:"service_component_namespace";s:18:"Drupal\Core\Render";s:10:"type_label";s:12:"element_info";s:15:"alter_hook_name";s:20:"element_plugin_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:7:"Element";s:16:"plugin_interface";s:43:"Drupal\Core\Render\Element\ElementInterface";s:33:"plugin_definition_annotation_name";s:43:"Drupal\Core\Render\Annotation\RenderElement";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:40:"Drupal\Core\Render\Element\RenderElement";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:2:{s:7:"getInfo";a:3:{s:4:"name";s:7:"getInfo";s:11:"declaration";s:26:"public function getInfo();";s:11:"description";s:48:"Returns the element properties for this element.";}s:13:"setAttributes";a:3:{s:4:"name";s:13:"setAttributes";s:11:"declaration";s:61:"public static function setAttributes(&$element, $class = []);";s:11:"description";s:38:"Sets a form element's class attribute.";}}}s:26:"entity_reference_selection";a:17:{s:7:"type_id";s:26:"entity_reference_selection";s:10:"service_id";s:41:"plugin.manager.entity_reference_selection";s:18:"service_class_name";s:66:"Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager";s:27:"service_component_namespace";s:18:"Drupal\Core\Entity";s:10:"type_label";s:26:"entity_reference_selection";s:15:"alter_hook_name";s:32:"entity_reference_selection_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:31:"Plugin/EntityReferenceSelection";s:16:"plugin_interface";s:62:"Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface";s:33:"plugin_definition_annotation_name";s:54:"Drupal\Core\Entity\Annotation\EntityReferenceSelection";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:63:"Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:48:"The human-readable name of the selection plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"group";a:3:{s:4:"name";s:5:"group";s:11:"description";s:27:"The selection plugin group.";s:4:"type";s:6:"string";}s:12:"entity_types";a:3:{s:4:"name";s:12:"entity_types";s:11:"description";s:63:"An array of entity types that can be referenced by this plugin.";s:4:"type";s:5:"array";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:38:"The weight of the plugin in its group.";s:4:"type";s:3:"int";}}s:24:"plugin_interface_methods";a:7:{s:24:"getReferenceableEntities";a:3:{s:4:"name";s:24:"getReferenceableEntities";s:11:"declaration";s:98:"public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0);";s:11:"description";s:40:"Gets the list of referenceable entities.";}s:26:"countReferenceableEntities";a:3:{s:4:"name";s:26:"countReferenceableEntities";s:11:"declaration";s:88:"public function countReferenceableEntities($match = NULL, $match_operator = 'CONTAINS');";s:11:"description";s:39:"Counts entities that are referenceable.";}s:29:"validateReferenceableEntities";a:3:{s:4:"name";s:29:"validateReferenceableEntities";s:11:"declaration";s:58:"public function validateReferenceableEntities(array $ids);";s:11:"description";s:52:"Validates which existing entities can be referenced.";}s:16:"entityQueryAlter";a:3:{s:4:"name";s:16:"entityQueryAlter";s:11:"declaration";s:85:"public function entityQueryAlter(\Drupal\Core\Database\Query\SelectInterface $query);";s:11:"description";s:76:"Allows the selection to alter the SelectQuery generated by EntityFieldQuery.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}}}s:16:"field.field_type";a:17:{s:7:"type_id";s:16:"field.field_type";s:10:"service_id";s:31:"plugin.manager.field.field_type";s:18:"service_class_name";s:40:"Drupal\Core\Field\FieldTypePluginManager";s:27:"service_component_namespace";s:17:"Drupal\Core\Field";s:10:"type_label";s:16:"field.field_type";s:15:"alter_hook_name";s:16:"field_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:22:"Plugin/Field/FieldType";s:16:"plugin_interface";s:36:"Drupal\Core\Field\FieldItemInterface";s:33:"plugin_definition_annotation_name";s:38:"Drupal\Core\Field\Annotation\FieldType";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\Core\Field\FieldItemBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:14:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:6:"module";a:3:{s:4:"name";s:6:"module";s:11:"description";s:55:"The name of the module providing the field type plugin.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:42:"The human-readable name of the field type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:54:"A short human readable description for the field type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:11:"description";s:67:"The category under which the field type should be listed in the UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:14:"default_widget";a:3:{s:4:"name";s:14:"default_widget";s:11:"description";s:56:"The plugin_id of the default widget for this field type.";s:4:"type";s:6:"string";}s:17:"default_formatter";a:3:{s:4:"name";s:17:"default_formatter";s:11:"description";s:59:"The plugin_id of the default formatter for this field type.";s:4:"type";s:6:"string";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:76:"A boolean stating that fields of this type cannot be created through the UI.";s:4:"type";s:4:"bool";}s:10:"list_class";a:2:{s:4:"name";s:10:"list_class";s:11:"description";s:13:"{@inheritdoc}";}s:11:"cardinality";a:3:{s:4:"name";s:11:"cardinality";s:11:"description";s:60:"An integer defining a fixed cardinality for this field type.";s:4:"type";s:8:"int|null";}s:16:"definition_class";a:3:{s:4:"name";s:16:"definition_class";s:11:"description";s:59:"The definition class to use for defining data of this type.";s:4:"type";s:6:"string";}s:21:"list_definition_class";a:3:{s:4:"name";s:21:"list_definition_class";s:11:"description";s:70:"The definition class to use for defining a list of items of this type.";s:4:"type";s:6:"string";}s:11:"constraints";a:3:{s:4:"name";s:11:"constraints";s:11:"description";s:49:"An array of validation constraints for this type.";s:4:"type";s:5:"array";}s:35:"unwrap_for_canonical_representation";a:3:{s:4:"name";s:35:"unwrap_for_canonical_representation";s:11:"description";s:72:"Whether the typed object wraps the canonical representation of the data.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:27:{s:19:"propertyDefinitions";a:3:{s:4:"name";s:19:"propertyDefinitions";s:11:"declaration";s:113:"public static function propertyDefinitions(\Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition);";s:11:"description";s:30:"Defines field item properties.";}s:16:"mainPropertyName";a:3:{s:4:"name";s:16:"mainPropertyName";s:11:"declaration";s:42:"public static function mainPropertyName();";s:11:"description";s:46:"Returns the name of the main property, if any.";}s:6:"schema";a:3:{s:4:"name";s:6:"schema";s:11:"declaration";s:100:"public static function schema(\Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition);";s:11:"description";s:33:"Returns the schema for the field.";}s:9:"getEntity";a:3:{s:4:"name";s:9:"getEntity";s:11:"declaration";s:28:"public function getEntity();";s:11:"description";s:38:"Gets the entity that field belongs to.";}s:11:"getLangcode";a:3:{s:4:"name";s:11:"getLangcode";s:11:"declaration";s:30:"public function getLangcode();";s:11:"description";s:57:"Gets the langcode of the field values held in the object.";}s:18:"getFieldDefinition";a:3:{s:4:"name";s:18:"getFieldDefinition";s:11:"declaration";s:37:"public function getFieldDefinition();";s:11:"description";s:26:"Gets the field definition.";}s:5:"__get";a:3:{s:4:"name";s:5:"__get";s:11:"declaration";s:38:"public function __get($property_name);";s:11:"description";s:36:"Magic method: Gets a property value.";}s:5:"__set";a:3:{s:4:"name";s:5:"__set";s:11:"declaration";s:46:"public function __set($property_name, $value);";s:11:"description";s:36:"Magic method: Sets a property value.";}s:7:"__isset";a:3:{s:4:"name";s:7:"__isset";s:11:"declaration";s:40:"public function __isset($property_name);";s:11:"description";s:51:"Magic method: Determines whether a property is set.";}s:7:"__unset";a:3:{s:4:"name";s:7:"__unset";s:11:"declaration";s:40:"public function __unset($property_name);";s:11:"description";s:32:"Magic method: Unsets a property.";}s:4:"view";a:3:{s:4:"name";s:4:"view";s:11:"declaration";s:44:"public function view($display_options = []);";s:11:"description";s:51:"Returns a renderable array for a single field item.";}s:7:"preSave";a:3:{s:4:"name";s:7:"preSave";s:11:"declaration";s:26:"public function preSave();";s:11:"description";s:49:"Defines custom presave behavior for field values.";}s:8:"postSave";a:3:{s:4:"name";s:8:"postSave";s:11:"declaration";s:34:"public function postSave($update);";s:11:"description";s:51:"Defines custom post-save behavior for field values.";}s:6:"delete";a:3:{s:4:"name";s:6:"delete";s:11:"declaration";s:25:"public function delete();";s:11:"description";s:48:"Defines custom delete behavior for field values.";}s:14:"deleteRevision";a:3:{s:4:"name";s:14:"deleteRevision";s:11:"declaration";s:33:"public function deleteRevision();";s:11:"description";s:57:"Defines custom revision delete behavior for field values.";}s:19:"generateSampleValue";a:3:{s:4:"name";s:19:"generateSampleValue";s:11:"declaration";s:106:"public static function generateSampleValue(\Drupal\Core\Field\FieldDefinitionInterface $field_definition);";s:11:"description";s:35:"Generates placeholder field values.";}s:22:"defaultStorageSettings";a:3:{s:4:"name";s:22:"defaultStorageSettings";s:11:"declaration";s:48:"public static function defaultStorageSettings();";s:11:"description";s:51:"Defines the storage-level settings for this plugin.";}s:20:"defaultFieldSettings";a:3:{s:4:"name";s:20:"defaultFieldSettings";s:11:"declaration";s:46:"public static function defaultFieldSettings();";s:11:"description";s:49:"Defines the field-level settings for this plugin.";}s:27:"storageSettingsToConfigData";a:3:{s:4:"name";s:27:"storageSettingsToConfigData";s:11:"declaration";s:68:"public static function storageSettingsToConfigData(array $settings);";s:11:"description";s:69:"Returns a settings array that can be stored as a configuration value.";}s:29:"storageSettingsFromConfigData";a:3:{s:4:"name";s:29:"storageSettingsFromConfigData";s:11:"declaration";s:70:"public static function storageSettingsFromConfigData(array $settings);";s:11:"description";s:70:"Returns a settings array in the field type's canonical representation.";}s:25:"fieldSettingsToConfigData";a:3:{s:4:"name";s:25:"fieldSettingsToConfigData";s:11:"declaration";s:66:"public static function fieldSettingsToConfigData(array $settings);";s:11:"description";s:69:"Returns a settings array that can be stored as a configuration value.";}s:27:"fieldSettingsFromConfigData";a:3:{s:4:"name";s:27:"fieldSettingsFromConfigData";s:11:"declaration";s:68:"public static function fieldSettingsFromConfigData(array $settings);";s:11:"description";s:70:"Returns a settings array in the field type's canonical representation.";}s:19:"storageSettingsForm";a:3:{s:4:"name";s:19:"storageSettingsForm";s:11:"declaration";s:111:"public function storageSettingsForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $has_data);";s:11:"description";s:46:"Returns a form for the storage-level settings.";}s:17:"fieldSettingsForm";a:3:{s:4:"name";s:17:"fieldSettingsForm";s:11:"declaration";s:97:"public function fieldSettingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:44:"Returns a form for the field-level settings.";}s:21:"calculateDependencies";a:3:{s:4:"name";s:21:"calculateDependencies";s:11:"declaration";s:108:"public static function calculateDependencies(\Drupal\Core\Field\FieldDefinitionInterface $field_definition);";s:11:"description";s:40:"Calculates dependencies for field items.";}s:28:"calculateStorageDependencies";a:3:{s:4:"name";s:28:"calculateStorageDependencies";s:11:"declaration";s:130:"public static function calculateStorageDependencies(\Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition);";s:11:"description";s:61:"Calculates dependencies for field items on the storage level.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:127:"public static function onDependencyRemoval(\Drupal\Core\Field\FieldDefinitionInterface $field_definition, array $dependencies);";s:11:"description";s:66:"Informs the plugin that a dependency of the field will be deleted.";}}}s:15:"field.formatter";a:19:{s:7:"type_id";s:15:"field.formatter";s:10:"service_id";s:30:"plugin.manager.field.formatter";s:18:"service_class_name";s:40:"Drupal\Core\Field\FormatterPluginManager";s:27:"service_component_namespace";s:17:"Drupal\Core\Field";s:10:"type_label";s:15:"field.formatter";s:15:"alter_hook_name";s:26:"field_formatter_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:27:"Plugin/Field/FieldFormatter";s:16:"plugin_interface";s:36:"Drupal\Core\Field\FormatterInterface";s:33:"plugin_definition_annotation_name";s:43:"Drupal\Core\Field\Annotation\FieldFormatter";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\Core\Field\FormatterBase";s:17:"base_class_has_di";b:1;s:20:"config_schema_prefix";s:25:"field.formatter.settings.";s:28:"constructor_fixed_parameters";a:7:{i:0;a:3:{s:10:"extraction";s:10:"$plugin_id";s:4:"type";s:6:"string";s:4:"name";s:9:"plugin_id";}i:1;a:3:{s:10:"extraction";s:18:"$plugin_definition";s:4:"type";s:5:"mixed";s:4:"name";s:17:"plugin_definition";}i:2;a:3:{s:10:"extraction";s:34:"$configuration['field_definition']";s:4:"type";s:42:"Drupal\Core\Field\FieldDefinitionInterface";s:4:"name";s:16:"field_definition";}i:3;a:3:{s:10:"extraction";s:26:"$configuration['settings']";s:4:"type";s:5:"array";s:4:"name";s:8:"settings";}i:4;a:3:{s:10:"extraction";s:23:"$configuration['label']";s:4:"type";s:6:"string";s:4:"name";s:5:"label";}i:5;a:3:{s:10:"extraction";s:27:"$configuration['view_mode']";s:4:"type";s:6:"string";s:4:"name";s:9:"view_mode";}i:6;a:3:{s:10:"extraction";s:38:"$configuration['third_party_settings']";s:4:"type";s:5:"array";s:4:"name";s:20:"third_party_settings";}}s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:46:"The human-readable name of the formatter type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:42:"A short description of the formatter type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:38:"The name of the field formatter class.";s:4:"type";s:6:"string";}s:11:"field_types";a:3:{s:4:"name";s:11:"field_types";s:11:"description";s:47:"An array of field types the formatter supports.";s:4:"type";s:5:"array";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:53:"An integer to determine the weight of this formatter.";s:4:"type";s:3:"int";}}s:24:"plugin_interface_methods";a:12:{s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:92:"public function settingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:55:"Returns a form to configure settings for the formatter.";}s:15:"settingsSummary";a:3:{s:4:"name";s:15:"settingsSummary";s:11:"declaration";s:34:"public function settingsSummary();";s:11:"description";s:59:"Returns a short summary for the current formatter settings.";}s:11:"prepareView";a:3:{s:4:"name";s:11:"prepareView";s:11:"declaration";s:51:"public function prepareView(array $entities_items);";s:11:"description";s:71:"Allows formatters to load information for field values being displayed.";}s:4:"view";a:3:{s:4:"name";s:4:"view";s:11:"declaration";s:89:"public function view(\Drupal\Core\Field\FieldItemListInterface $items, $langcode = NULL);";s:11:"description";s:51:"Builds a renderable array for a fully themed field.";}s:12:"viewElements";a:3:{s:4:"name";s:12:"viewElements";s:11:"declaration";s:90:"public function viewElements(\Drupal\Core\Field\FieldItemListInterface $items, $langcode);";s:11:"description";s:44:"Builds a renderable array for a field value.";}s:12:"isApplicable";a:3:{s:4:"name";s:12:"isApplicable";s:11:"declaration";s:99:"public static function isApplicable(\Drupal\Core\Field\FieldDefinitionInterface $field_definition);";s:11:"description";s:60:"Returns if the formatter can be used for the provided field.";}s:15:"defaultSettings";a:3:{s:4:"name";s:15:"defaultSettings";s:11:"declaration";s:41:"public static function defaultSettings();";s:11:"description";s:45:"Defines the default settings for this plugin.";}s:11:"getSettings";a:3:{s:4:"name";s:11:"getSettings";s:11:"declaration";s:30:"public function getSettings();";s:11:"description";s:71:"Returns the array of settings, including defaults for missing settings.";}s:10:"getSetting";a:3:{s:4:"name";s:10:"getSetting";s:11:"declaration";s:33:"public function getSetting($key);";s:11:"description";s:63:"Returns the value of a setting, or its default value if absent.";}s:11:"setSettings";a:3:{s:4:"name";s:11:"setSettings";s:11:"declaration";s:45:"public function setSettings(array $settings);";s:11:"description";s:33:"Sets the settings for the plugin.";}s:10:"setSetting";a:3:{s:4:"name";s:10:"setSetting";s:11:"declaration";s:41:"public function setSetting($key, $value);";s:11:"description";s:43:"Sets the value of a setting for the plugin.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:57:"public function onDependencyRemoval(array $dependencies);";s:11:"description";s:73:"Informs the plugin that some configuration it depends on will be deleted.";}}}s:12:"field.widget";a:19:{s:7:"type_id";s:12:"field.widget";s:10:"service_id";s:27:"plugin.manager.field.widget";s:18:"service_class_name";s:37:"Drupal\Core\Field\WidgetPluginManager";s:27:"service_component_namespace";s:17:"Drupal\Core\Field";s:10:"type_label";s:12:"field.widget";s:15:"alter_hook_name";s:23:"field_widget_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:24:"Plugin/Field/FieldWidget";s:16:"plugin_interface";s:33:"Drupal\Core\Field\WidgetInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\Core\Field\Annotation\FieldWidget";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:28:"Drupal\Core\Field\WidgetBase";s:17:"base_class_has_di";b:1;s:20:"config_schema_prefix";s:22:"field.widget.settings.";s:28:"constructor_fixed_parameters";a:5:{i:0;a:3:{s:10:"extraction";s:10:"$plugin_id";s:4:"type";s:6:"string";s:4:"name";s:9:"plugin_id";}i:1;a:3:{s:10:"extraction";s:18:"$plugin_definition";s:4:"type";s:5:"mixed";s:4:"name";s:17:"plugin_definition";}i:2;a:3:{s:10:"extraction";s:34:"$configuration['field_definition']";s:4:"type";s:42:"Drupal\Core\Field\FieldDefinitionInterface";s:4:"name";s:16:"field_definition";}i:3;a:3:{s:10:"extraction";s:26:"$configuration['settings']";s:4:"type";s:5:"array";s:4:"name";s:8:"settings";}i:4;a:3:{s:10:"extraction";s:38:"$configuration['third_party_settings']";s:4:"type";s:5:"array";s:4:"name";s:20:"third_party_settings";}}s:17:"plugin_properties";a:7:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:43:"The human-readable name of the widget type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"A short description of the widget type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"class";a:3:{s:4:"name";s:5:"class";s:11:"description";s:29:"The name of the widget class.";s:4:"type";s:6:"string";}s:11:"field_types";a:3:{s:4:"name";s:11:"field_types";s:11:"description";s:44:"An array of field types the widget supports.";s:4:"type";s:5:"array";}s:15:"multiple_values";a:3:{s:4:"name";s:15:"multiple_values";s:11:"description";s:54:"Does the field widget handles multiple values at once.";s:4:"type";s:4:"bool";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:72:"An integer to determine weight of this widget relative to other widgets.";s:4:"type";s:3:"int";}}s:24:"plugin_interface_methods";a:17:{s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:92:"public function settingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:52:"Returns a form to configure settings for the widget.";}s:15:"settingsSummary";a:3:{s:4:"name";s:15:"settingsSummary";s:11:"declaration";s:34:"public function settingsSummary();";s:11:"description";s:56:"Returns a short summary for the current widget settings.";}s:11:"formElement";a:3:{s:4:"name";s:11:"formElement";s:11:"declaration";s:166:"public function formElement(\Drupal\Core\Field\FieldItemListInterface $items, $delta, array $element, array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:43:"Returns the form for a single field widget.";}s:12:"errorElement";a:3:{s:4:"name";s:12:"errorElement";s:11:"declaration";s:178:"public function errorElement(array $element, \Symfony\Component\Validator\ConstraintViolationInterface $violation, array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:71:"Assigns a field-level validation error to the right widget sub-element.";}s:17:"massageFormValues";a:3:{s:4:"name";s:17:"massageFormValues";s:11:"declaration";s:112:"public function massageFormValues(array $values, array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:67:"Massages the form values into the format expected for field values.";}s:12:"isApplicable";a:3:{s:4:"name";s:12:"isApplicable";s:11:"declaration";s:99:"public static function isApplicable(\Drupal\Core\Field\FieldDefinitionInterface $field_definition);";s:11:"description";s:57:"Returns if the widget can be used for the provided field.";}s:4:"form";a:3:{s:4:"name";s:4:"form";s:11:"declaration";s:154:"public function form(\Drupal\Core\Field\FieldItemListInterface $items, array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $get_delta = NULL);";s:11:"description";s:35:"Creates a form element for a field.";}s:17:"extractFormValues";a:3:{s:4:"name";s:17:"extractFormValues";s:11:"declaration";s:147:"public function extractFormValues(\Drupal\Core\Field\FieldItemListInterface $items, array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Extracts field values from submitted form values.";}s:10:"flagErrors";a:3:{s:4:"name";s:10:"flagErrors";s:11:"declaration";s:215:"public function flagErrors(\Drupal\Core\Field\FieldItemListInterface $items, \Symfony\Component\Validator\ConstraintViolationListInterface $violations, array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:67:"Reports field-level validation errors against actual form elements.";}s:14:"getWidgetState";a:3:{s:4:"name";s:14:"getWidgetState";s:11:"declaration";s:117:"public static function getWidgetState(array $parents, $field_name, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:67:"Retrieves processing information about the widget from $form_state.";}s:14:"setWidgetState";a:3:{s:4:"name";s:14:"setWidgetState";s:11:"declaration";s:137:"public static function setWidgetState(array $parents, $field_name, \Drupal\Core\Form\FormStateInterface $form_state, array $field_state);";s:11:"description";s:62:"Stores processing information about the widget in $form_state.";}s:15:"defaultSettings";a:3:{s:4:"name";s:15:"defaultSettings";s:11:"declaration";s:41:"public static function defaultSettings();";s:11:"description";s:45:"Defines the default settings for this plugin.";}s:11:"getSettings";a:3:{s:4:"name";s:11:"getSettings";s:11:"declaration";s:30:"public function getSettings();";s:11:"description";s:71:"Returns the array of settings, including defaults for missing settings.";}s:10:"getSetting";a:3:{s:4:"name";s:10:"getSetting";s:11:"declaration";s:33:"public function getSetting($key);";s:11:"description";s:63:"Returns the value of a setting, or its default value if absent.";}s:11:"setSettings";a:3:{s:4:"name";s:11:"setSettings";s:11:"declaration";s:45:"public function setSettings(array $settings);";s:11:"description";s:33:"Sets the settings for the plugin.";}s:10:"setSetting";a:3:{s:4:"name";s:10:"setSetting";s:11:"declaration";s:41:"public function setSetting($key, $value);";s:11:"description";s:43:"Sets the value of a setting for the plugin.";}s:19:"onDependencyRemoval";a:3:{s:4:"name";s:19:"onDependencyRemoval";s:11:"declaration";s:57:"public function onDependencyRemoval(array $dependencies);";s:11:"description";s:73:"Informs the plugin that some configuration it depends on will be deleted.";}}}s:6:"filter";a:17:{s:7:"type_id";s:6:"filter";s:10:"service_id";s:21:"plugin.manager.filter";s:18:"service_class_name";s:33:"Drupal\filter\FilterPluginManager";s:27:"service_component_namespace";s:13:"Drupal\filter";s:10:"type_label";s:6:"filter";s:15:"alter_hook_name";s:17:"filter_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:13:"Plugin/Filter";s:16:"plugin_interface";s:36:"Drupal\filter\Plugin\FilterInterface";s:33:"plugin_definition_annotation_name";s:31:"Drupal\filter\Annotation\Filter";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\filter\Plugin\FilterBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:7:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:8:"provider";a:3:{s:4:"name";s:8:"provider";s:11:"description";s:46:"The name of the provider that owns the filter.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The human-readable name of the filter.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:66:"Additional administrative information about the filter's behavior.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:52:"A default weight for the filter in new text formats.";s:4:"type";s:3:"int";}s:6:"status";a:3:{s:4:"name";s:6:"status";s:11:"description";s:54:"Whether this filter is enabled or disabled by default.";s:4:"type";s:4:"bool";}s:8:"settings";a:3:{s:4:"name";s:8:"settings";s:11:"description";s:36:"The default settings for the filter.";s:4:"type";s:5:"array";}}s:24:"plugin_interface_methods";a:8:{s:7:"getType";a:3:{s:4:"name";s:7:"getType";s:11:"declaration";s:26:"public function getType();";s:11:"description";s:50:"Returns the processing type of this filter plugin.";}s:8:"getLabel";a:3:{s:4:"name";s:8:"getLabel";s:11:"declaration";s:27:"public function getLabel();";s:11:"description";s:56:"Returns the administrative label for this filter plugin.";}s:14:"getDescription";a:3:{s:4:"name";s:14:"getDescription";s:11:"declaration";s:33:"public function getDescription();";s:11:"description";s:62:"Returns the administrative description for this filter plugin.";}s:12:"settingsForm";a:3:{s:4:"name";s:12:"settingsForm";s:11:"declaration";s:92:"public function settingsForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:35:"Generates a filter's settings form.";}s:7:"prepare";a:3:{s:4:"name";s:7:"prepare";s:11:"declaration";s:42:"public function prepare($text, $langcode);";s:11:"description";s:33:"Prepares the text for processing.";}s:7:"process";a:3:{s:4:"name";s:7:"process";s:11:"declaration";s:42:"public function process($text, $langcode);";s:11:"description";s:31:"Performs the filter processing.";}s:19:"getHTMLRestrictions";a:3:{s:4:"name";s:19:"getHTMLRestrictions";s:11:"declaration";s:38:"public function getHTMLRestrictions();";s:11:"description";s:52:"Returns HTML allowed by this filter's configuration.";}s:4:"tips";a:3:{s:4:"name";s:4:"tips";s:11:"declaration";s:36:"public function tips($long = FALSE);";s:11:"description";s:25:"Generates a filter's tip.";}}}s:12:"help_section";a:17:{s:7:"type_id";s:12:"help_section";s:10:"service_id";s:27:"plugin.manager.help_section";s:18:"service_class_name";s:30:"Drupal\help\HelpSectionManager";s:27:"service_component_namespace";s:11:"Drupal\help";s:10:"type_label";s:12:"help_section";s:15:"alter_hook_name";s:23:"help_section_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/HelpSection";s:16:"plugin_interface";s:38:"Drupal\help\HelpSectionPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\help\Annotation\HelpSection";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:52:"Drupal\help\Plugin\HelpSection\HelpSectionPluginBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:54:"The text to use as the title of the help page section.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:41:"The description of the help page section.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"permission";a:3:{s:4:"name";s:10:"permission";s:11:"description";s:58:"The (optional) permission needed to view the help section.";s:4:"type";s:6:"string";}s:6:"weight";a:3:{s:4:"name";s:6:"weight";s:11:"description";s:40:"An optional weight for the help section.";s:4:"type";s:3:"int";}}s:24:"plugin_interface_methods";a:6:{s:8:"getTitle";a:3:{s:4:"name";s:8:"getTitle";s:11:"declaration";s:27:"public function getTitle();";s:11:"description";s:38:"Returns the title of the help section.";}s:14:"getDescription";a:3:{s:4:"name";s:14:"getDescription";s:11:"declaration";s:33:"public function getDescription();";s:11:"description";s:50:"Returns the description text for the help section.";}s:10:"listTopics";a:3:{s:4:"name";s:10:"listTopics";s:11:"declaration";s:29:"public function listTopics();";s:11:"description";s:53:"Returns a list of topics to show in the help section.";}s:16:"getCacheContexts";a:3:{s:4:"name";s:16:"getCacheContexts";s:11:"declaration";s:35:"public function getCacheContexts();";s:11:"description";s:47:"The cache contexts associated with this object.";}s:12:"getCacheTags";a:3:{s:4:"name";s:12:"getCacheTags";s:11:"declaration";s:31:"public function getCacheTags();";s:11:"description";s:43:"The cache tags associated with this object.";}s:14:"getCacheMaxAge";a:3:{s:4:"name";s:14:"getCacheMaxAge";s:11:"declaration";s:33:"public function getCacheMaxAge();";s:11:"description";s:52:"The maximum age for which this object may be cached.";}}}s:12:"image.effect";a:18:{s:7:"type_id";s:12:"image.effect";s:10:"service_id";s:27:"plugin.manager.image.effect";s:18:"service_class_name";s:31:"Drupal\image\ImageEffectManager";s:27:"service_component_namespace";s:12:"Drupal\image";s:10:"type_label";s:12:"image.effect";s:15:"alter_hook_name";s:23:"image_effect_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/ImageEffect";s:16:"plugin_interface";s:33:"Drupal\image\ImageEffectInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\image\Annotation\ImageEffect";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:28:"Drupal\image\ImageEffectBase";s:17:"base_class_has_di";b:1;s:12:"construction";a:1:{i:0;a:3:{s:4:"type";s:23:"Psr\Log\LoggerInterface";s:4:"name";s:6:"logger";s:10:"extraction";s:47:"$container->get('logger.factory')->get('image')";}}s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:44:"The human-readable name of the image effect.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:40:"A brief description of the image effect.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:8:{s:11:"applyEffect";a:3:{s:4:"name";s:11:"applyEffect";s:11:"declaration";s:70:"public function applyEffect(\Drupal\Core\Image\ImageInterface $image);";s:11:"description";s:44:"Applies an image effect to the image object.";}s:19:"transformDimensions";a:3:{s:4:"name";s:19:"transformDimensions";s:11:"declaration";s:62:"public function transformDimensions(array &$dimensions, $uri);";s:11:"description";s:46:"Determines the dimensions of the styled image.";}s:22:"getDerivativeExtension";a:3:{s:4:"name";s:22:"getDerivativeExtension";s:11:"declaration";s:51:"public function getDerivativeExtension($extension);";s:11:"description";s:73:"Returns the extension of the derivative after applying this image effect.";}s:10:"getSummary";a:3:{s:4:"name";s:10:"getSummary";s:11:"declaration";s:29:"public function getSummary();";s:11:"description";s:73:"Returns a render array summarizing the configuration of the image effect.";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"declaration";s:24:"public function label();";s:11:"description";s:31:"Returns the image effect label.";}s:7:"getUuid";a:3:{s:4:"name";s:7:"getUuid";s:11:"declaration";s:26:"public function getUuid();";s:11:"description";s:52:"Returns the unique ID representing the image effect.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:39:"Returns the weight of the image effect.";}s:9:"setWeight";a:3:{s:4:"name";s:9:"setWeight";s:11:"declaration";s:35:"public function setWeight($weight);";s:11:"description";s:38:"Sets the weight for this image effect.";}}}s:13:"image.toolkit";a:16:{s:7:"type_id";s:13:"image.toolkit";s:10:"service_id";s:21:"image.toolkit.manager";s:18:"service_class_name";s:44:"Drupal\Core\ImageToolkit\ImageToolkitManager";s:27:"service_component_namespace";s:24:"Drupal\Core\ImageToolkit";s:10:"type_label";s:13:"image.toolkit";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:19:"Plugin/ImageToolkit";s:16:"plugin_interface";s:46:"Drupal\Core\ImageToolkit\ImageToolkitInterface";s:33:"plugin_definition_annotation_name";s:48:"Drupal\Core\ImageToolkit\Annotation\ImageToolkit";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:41:"Drupal\Core\ImageToolkit\ImageToolkitBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:31:"The title of the image toolkit.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:15:{s:9:"setSource";a:3:{s:4:"name";s:9:"setSource";s:11:"declaration";s:35:"public function setSource($source);";s:11:"description";s:39:"Sets the source path of the image file.";}s:9:"getSource";a:3:{s:4:"name";s:9:"getSource";s:11:"declaration";s:28:"public function getSource();";s:11:"description";s:39:"Gets the source path of the image file.";}s:7:"isValid";a:3:{s:4:"name";s:7:"isValid";s:11:"declaration";s:26:"public function isValid();";s:11:"description";s:29:"Checks if the image is valid.";}s:4:"save";a:3:{s:4:"name";s:4:"save";s:11:"declaration";s:35:"public function save($destination);";s:11:"description";s:47:"Writes an image resource to a destination file.";}s:9:"parseFile";a:3:{s:4:"name";s:9:"parseFile";s:11:"declaration";s:28:"public function parseFile();";s:11:"description";s:44:"Determines if a file contains a valid image.";}s:9:"getHeight";a:3:{s:4:"name";s:9:"getHeight";s:11:"declaration";s:28:"public function getHeight();";s:11:"description";s:32:"Returns the height of the image.";}s:8:"getWidth";a:3:{s:4:"name";s:8:"getWidth";s:11:"declaration";s:27:"public function getWidth();";s:11:"description";s:31:"Returns the width of the image.";}s:11:"getMimeType";a:3:{s:4:"name";s:11:"getMimeType";s:11:"declaration";s:30:"public function getMimeType();";s:11:"description";s:40:"Returns the MIME type of the image file.";}s:15:"getRequirements";a:3:{s:4:"name";s:15:"getRequirements";s:11:"declaration";s:34:"public function getRequirements();";s:11:"description";s:71:"Gets toolkit requirements in a format suitable for hook_requirements().";}s:11:"isAvailable";a:3:{s:4:"name";s:11:"isAvailable";s:11:"declaration";s:37:"public static function isAvailable();";s:11:"description";s:52:"Verifies that the Image Toolkit is set up correctly.";}s:22:"getSupportedExtensions";a:3:{s:4:"name";s:22:"getSupportedExtensions";s:11:"declaration";s:48:"public static function getSupportedExtensions();";s:11:"description";s:65:"Returns a list of image file extensions supported by the toolkit.";}s:5:"apply";a:3:{s:4:"name";s:5:"apply";s:11:"declaration";s:57:"public function apply($operation, array $arguments = []);";s:11:"description";s:40:"Applies a toolkit operation to an image.";}s:22:"buildConfigurationForm";a:3:{s:4:"name";s:22:"buildConfigurationForm";s:11:"declaration";s:102:"public function buildConfigurationForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:17:"Form constructor.";}s:25:"validateConfigurationForm";a:3:{s:4:"name";s:25:"validateConfigurationForm";s:11:"declaration";s:106:"public function validateConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form validation handler.";}s:23:"submitConfigurationForm";a:3:{s:4:"name";s:23:"submitConfigurationForm";s:11:"declaration";s:104:"public function submitConfigurationForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:24:"Form submission handler.";}}}s:23:"image.toolkit.operation";a:18:{s:7:"type_id";s:23:"image.toolkit.operation";s:10:"service_id";s:31:"image.toolkit.operation.manager";s:18:"service_class_name";s:53:"Drupal\Core\ImageToolkit\ImageToolkitOperationManager";s:27:"service_component_namespace";s:24:"Drupal\Core\ImageToolkit";s:10:"type_label";s:23:"image.toolkit.operation";s:15:"alter_hook_name";s:29:"image_toolkit_operation_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:29:"Plugin/ImageToolkit/Operation";s:16:"plugin_interface";s:55:"Drupal\Core\ImageToolkit\ImageToolkitOperationInterface";s:33:"plugin_definition_annotation_name";s:57:"Drupal\Core\ImageToolkit\Annotation\ImageToolkitOperation";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:50:"Drupal\Core\ImageToolkit\ImageToolkitOperationBase";s:17:"base_class_has_di";b:0;s:28:"constructor_fixed_parameters";a:5:{i:0;a:3:{s:10:"extraction";s:14:"$configuration";s:4:"type";s:5:"array";s:4:"name";s:13:"configuration";}i:1;a:3:{s:10:"extraction";s:10:"$plugin_id";s:4:"type";s:6:"string";s:4:"name";s:9:"plugin_id";}i:2;a:3:{s:10:"extraction";s:18:"$plugin_definition";s:4:"type";s:5:"array";s:4:"name";s:17:"plugin_definition";}i:3;a:3:{s:10:"extraction";s:8:"$toolkit";s:4:"type";s:46:"Drupal\Core\ImageToolkit\ImageToolkitInterface";s:4:"name";s:7:"toolkit";}i:4;a:3:{s:10:"extraction";s:13:"$this->logger";s:4:"type";s:23:"Psr\Log\LoggerInterface";s:4:"name";s:6:"logger";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:7:"toolkit";a:3:{s:4:"name";s:7:"toolkit";s:11:"description";s:74:"The id of the image toolkit plugin for which the operation is implemented.";s:4:"type";s:6:"string";}s:9:"operation";a:3:{s:4:"name";s:9:"operation";s:11:"description";s:74:"The machine name of the image toolkit operation implemented (e.g. "crop").";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:55:"The human-readable name of the image toolkit operation.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:47:"The description of the image toolkit operation.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:1:{s:5:"apply";a:3:{s:4:"name";s:5:"apply";s:11:"declaration";s:40:"public function apply(array $arguments);";s:11:"description";s:49:"Applies a toolkit specific operation to an image.";}}}s:18:"link_relation_type";a:14:{s:7:"type_id";s:18:"link_relation_type";s:10:"service_id";s:33:"plugin.manager.link_relation_type";s:18:"service_class_name";s:40:"Drupal\Core\Http\LinkRelationTypeManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Http";s:10:"type_label";s:18:"link_relation_type";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:19:"link_relation_types";s:15:"yaml_properties";a:1:{s:5:"class";s:33:"Drupal\Core\Http\LinkRelationType";}s:18:"annotation_id_only";N;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:4:"mail";a:17:{s:7:"type_id";s:4:"mail";s:10:"service_id";s:19:"plugin.manager.mail";s:18:"service_class_name";s:28:"Drupal\Core\Mail\MailManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Mail";s:10:"type_label";s:4:"mail";s:15:"alter_hook_name";s:23:"mail_backend_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:11:"Plugin/Mail";s:16:"plugin_interface";s:30:"Drupal\Core\Mail\MailInterface";s:33:"plugin_definition_annotation_name";s:27:"Drupal\Core\Annotation\Mail";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:36:"Drupal\Core\Mail\Plugin\Mail\PhpMail";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:43:"The human-readable name of the mail plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:39:"A short description of the mail plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:2:{s:6:"format";a:3:{s:4:"name";s:6:"format";s:11:"declaration";s:39:"public function format(array $message);";s:11:"description";s:35:"Formats a message prior to sending.";}s:4:"mail";a:3:{s:4:"name";s:4:"mail";s:11:"declaration";s:37:"public function mail(array $message);";s:11:"description";s:75:"Sends a message composed by \Drupal\Core\Mail\MailManagerInterface->mail().";}}}s:20:"menu.contextual_link";a:15:{s:7:"type_id";s:20:"menu.contextual_link";s:10:"service_id";s:35:"plugin.manager.menu.contextual_link";s:18:"service_class_name";s:38:"Drupal\Core\Menu\ContextualLinkManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Menu";s:10:"type_label";s:20:"menu.contextual_link";s:15:"alter_hook_name";s:30:"contextual_links_plugins_alter";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:16:"links.contextual";s:15:"yaml_properties";a:6:{s:10:"route_name";s:0:"";s:5:"group";s:0:"";s:5:"title";s:0:"";s:7:"options";a:0:{}s:6:"weight";N;s:5:"class";s:39:"\Drupal\Core\Menu\ContextualLinkDefault";}s:18:"annotation_id_only";N;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:9:"menu.link";a:16:{s:7:"type_id";s:9:"menu.link";s:10:"service_id";s:24:"plugin.manager.menu.link";s:18:"service_class_name";s:32:"Drupal\Core\Menu\MenuLinkManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Menu";s:10:"type_label";s:9:"menu.link";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:10:"links.menu";s:15:"yaml_properties";a:15:{s:9:"menu_name";s:5:"tools";s:10:"route_name";s:0:"";s:16:"route_parameters";a:0:{}s:3:"url";s:0:"";s:5:"title";s:0:"";s:11:"description";s:0:"";s:6:"parent";s:0:"";s:6:"weight";i:0;s:7:"options";a:0:{}s:8:"expanded";i:0;s:7:"enabled";i:1;s:8:"provider";s:0:"";s:8:"metadata";a:0:{}s:5:"class";s:32:"Drupal\Core\Menu\MenuLinkDefault";s:10:"form_class";s:41:"Drupal\Core\Menu\Form\MenuLinkDefaultForm";}s:18:"annotation_id_only";N;s:10:"base_class";s:29:"Drupal\Core\Menu\MenuLinkBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:17:"menu.local_action";a:18:{s:7:"type_id";s:17:"menu.local_action";s:10:"service_id";s:32:"plugin.manager.menu.local_action";s:18:"service_class_name";s:35:"Drupal\Core\Menu\LocalActionManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Menu";s:10:"type_label";s:17:"menu.local_action";s:15:"alter_hook_name";s:24:"menu_local_actions_alter";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:12:"links.action";s:15:"yaml_properties";a:7:{s:5:"title";s:0:"";s:6:"weight";N;s:10:"route_name";N;s:16:"route_parameters";a:0:{}s:7:"options";a:0:{}s:10:"appears_on";a:0:{}s:5:"class";s:35:"Drupal\Core\Menu\LocalActionDefault";}s:18:"annotation_id_only";N;s:10:"base_class";s:35:"Drupal\Core\Menu\LocalActionDefault";s:17:"base_class_has_di";b:1;s:12:"construction";a:1:{i:0;a:3:{s:4:"type";s:42:"Drupal\Core\Routing\RouteProviderInterface";s:4:"name";s:14:"route_provider";s:10:"extraction";s:40:"$container->get('router.route_provider')";}}s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:15:"menu.local_task";a:17:{s:7:"type_id";s:15:"menu.local_task";s:10:"service_id";s:30:"plugin.manager.menu.local_task";s:18:"service_class_name";s:33:"Drupal\Core\Menu\LocalTaskManager";s:27:"service_component_namespace";s:16:"Drupal\Core\Menu";s:10:"type_label";s:15:"menu.local_task";s:15:"alter_hook_name";s:17:"local_tasks_alter";s:9:"discovery";s:42:"Drupal\Core\Plugin\Discovery\YamlDiscovery";s:6:"subdir";N;s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";N;s:16:"yaml_file_suffix";s:10:"links.task";s:15:"yaml_properties";a:8:{s:10:"route_name";s:0:"";s:16:"route_parameters";a:0:{}s:5:"title";s:0:"";s:10:"base_route";s:0:"";s:9:"parent_id";N;s:6:"weight";N;s:7:"options";a:0:{}s:5:"class";s:33:"Drupal\Core\Menu\LocalTaskDefault";}s:18:"annotation_id_only";N;s:10:"base_class";s:33:"Drupal\Core\Menu\LocalTaskDefault";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:0:{}s:24:"plugin_interface_methods";a:0:{}}s:12:"queue_worker";a:17:{s:7:"type_id";s:12:"queue_worker";s:10:"service_id";s:27:"plugin.manager.queue_worker";s:18:"service_class_name";s:36:"Drupal\Core\Queue\QueueWorkerManager";s:27:"service_component_namespace";s:17:"Drupal\Core\Queue";s:10:"type_label";s:12:"queue_worker";s:15:"alter_hook_name";s:16:"queue_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/QueueWorker";s:16:"plugin_interface";s:38:"Drupal\Core\Queue\QueueWorkerInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\Core\Annotation\QueueWorker";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:33:"Drupal\Core\Queue\QueueWorkerBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:39:"The human-readable title of the plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"cron";a:3:{s:4:"name";s:4:"cron";s:11:"description";s:51:"An optional associative array of settings for cron.";s:4:"type";s:5:"array";}}s:24:"plugin_interface_methods";a:1:{s:11:"processItem";a:3:{s:4:"name";s:11:"processItem";s:11:"declaration";s:35:"public function processItem($data);";s:11:"description";s:29:"Works on a single queue item.";}}}s:6:"search";a:17:{s:7:"type_id";s:6:"search";s:10:"service_id";s:21:"plugin.manager.search";s:18:"service_class_name";s:33:"Drupal\search\SearchPluginManager";s:27:"service_component_namespace";s:13:"Drupal\search";s:10:"type_label";s:6:"search";s:15:"alter_hook_name";s:19:"search_plugin_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:13:"Plugin/Search";s:16:"plugin_interface";s:36:"Drupal\search\Plugin\SearchInterface";s:33:"plugin_definition_annotation_name";s:37:"Drupal\search\Annotation\SearchPlugin";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:37:"Drupal\search\Plugin\SearchPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:42:"A unique identifier for the search plugin.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:34:"The title for the search page tab.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:15:"use_admin_theme";a:3:{s:4:"name";s:15:"use_admin_theme";s:11:"description";s:65:"Whether or not search results should be displayed in admin theme.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:13:{s:9:"setSearch";a:3:{s:4:"name";s:9:"setSearch";s:11:"declaration";s:75:"public function setSearch($keywords, array $parameters, array $attributes);";s:11:"description";s:70:"Sets the keywords, parameters, and attributes to be used by execute().";}s:11:"getKeywords";a:3:{s:4:"name";s:11:"getKeywords";s:11:"declaration";s:30:"public function getKeywords();";s:11:"description";s:58:"Returns the currently set keywords of the plugin instance.";}s:13:"getParameters";a:3:{s:4:"name";s:13:"getParameters";s:11:"declaration";s:32:"public function getParameters();";s:11:"description";s:53:"Returns the current parameters set using setSearch().";}s:13:"getAttributes";a:3:{s:4:"name";s:13:"getAttributes";s:11:"declaration";s:32:"public function getAttributes();";s:11:"description";s:56:"Returns the currently set attributes (from the request).";}s:18:"isSearchExecutable";a:3:{s:4:"name";s:18:"isSearchExecutable";s:11:"declaration";s:37:"public function isSearchExecutable();";s:11:"description";s:68:"Verifies if the values set via setSearch() are valid and sufficient.";}s:7:"getType";a:3:{s:4:"name";s:7:"getType";s:11:"declaration";s:26:"public function getType();";s:11:"description";s:47:"Returns the search index type this plugin uses.";}s:7:"execute";a:3:{s:4:"name";s:7:"execute";s:11:"declaration";s:26:"public function execute();";s:11:"description";s:20:"Executes the search.";}s:12:"buildResults";a:3:{s:4:"name";s:12:"buildResults";s:11:"declaration";s:31:"public function buildResults();";s:11:"description";s:66:"Executes the search and builds render arrays for the result items.";}s:14:"suggestedTitle";a:3:{s:4:"name";s:14:"suggestedTitle";s:11:"declaration";s:33:"public function suggestedTitle();";s:11:"description";s:56:"Provides a suggested title for a page of search results.";}s:7:"getHelp";a:3:{s:4:"name";s:7:"getHelp";s:11:"declaration";s:26:"public function getHelp();";s:11:"description";s:27:"Returns the searching help.";}s:15:"searchFormAlter";a:3:{s:4:"name";s:15:"searchFormAlter";s:11:"declaration";s:96:"public function searchFormAlter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:59:"Alters the search form when being built for a given plugin.";}s:19:"buildSearchUrlQuery";a:3:{s:4:"name";s:19:"buildSearchUrlQuery";s:11:"declaration";s:86:"public function buildSearchUrlQuery(\Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:53:"Builds the URL GET query parameters array for search.";}s:14:"usesAdminTheme";a:3:{s:4:"name";s:14:"usesAdminTheme";s:11:"declaration";s:33:"public function usesAdminTheme();";s:11:"description";s:73:"Returns whether or not search results should be displayed in admin theme.";}}}s:8:"tour.tip";a:17:{s:7:"type_id";s:8:"tour.tip";s:10:"service_id";s:23:"plugin.manager.tour.tip";s:18:"service_class_name";s:28:"Drupal\tour\TipPluginManager";s:27:"service_component_namespace";s:11:"Drupal\tour";s:10:"type_label";s:8:"tour.tip";s:15:"alter_hook_name";s:20:"tour_tips_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:15:"Plugin/tour/tip";s:16:"plugin_interface";s:30:"Drupal\tour\TipPluginInterface";s:33:"plugin_definition_annotation_name";s:26:"Drupal\tour\Annotation\Tip";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:25:"Drupal\tour\TipPluginBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:2:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:24:"The title of the plugin.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}}s:24:"plugin_interface_methods";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"declaration";s:21:"public function id();";s:11:"description";s:22:"Returns id of the tip.";}s:8:"getLabel";a:3:{s:4:"name";s:8:"getLabel";s:11:"declaration";s:27:"public function getLabel();";s:11:"description";s:25:"Returns label of the tip.";}s:9:"getWeight";a:3:{s:4:"name";s:9:"getWeight";s:11:"declaration";s:28:"public function getWeight();";s:11:"description";s:26:"Returns weight of the tip.";}s:3:"get";a:3:{s:4:"name";s:3:"get";s:11:"declaration";s:26:"public function get($key);";s:11:"description";s:33:"Used for returning values by key.";}s:3:"set";a:3:{s:4:"name";s:3:"set";s:11:"declaration";s:34:"public function set($key, $value);";s:11:"description";s:33:"Used for returning values by key.";}}}s:10:"typed_data";a:17:{s:7:"type_id";s:10:"typed_data";s:10:"service_id";s:18:"typed_data_manager";s:18:"service_class_name";s:38:"Drupal\Core\TypedData\TypedDataManager";s:27:"service_component_namespace";s:21:"Drupal\Core\TypedData";s:10:"type_label";s:10:"typed_data";s:15:"alter_hook_name";s:20:"data_type_info_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:15:"Plugin/DataType";s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";s:41:"Drupal\Core\TypedData\Annotation\DataType";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:31:"Drupal\Core\TypedData\TypedData";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:24:"The data type plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:41:"The human-readable name of the data type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"description";a:3:{s:4:"name";s:11:"description";s:11:"description";s:33:"The description of the data type.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:16:"definition_class";a:3:{s:4:"name";s:16:"definition_class";s:11:"description";s:59:"The definition class to use for defining data of this type.";s:4:"type";s:6:"string";}s:10:"list_class";a:3:{s:4:"name";s:10:"list_class";s:11:"description";s:71:"The typed data class used for wrapping multiple data items of the type.";s:4:"type";s:6:"string";}s:21:"list_definition_class";a:3:{s:4:"name";s:21:"list_definition_class";s:11:"description";s:70:"The definition class to use for defining a list of items of this type.";s:4:"type";s:6:"string";}s:11:"constraints";a:3:{s:4:"name";s:11:"constraints";s:11:"description";s:49:"An array of validation constraints for this type.";s:4:"type";s:5:"array";}s:35:"unwrap_for_canonical_representation";a:3:{s:4:"name";s:35:"unwrap_for_canonical_representation";s:11:"description";s:72:"Whether the typed object wraps the canonical representation of the data.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:0:{}}s:21:"validation.constraint";a:17:{s:7:"type_id";s:21:"validation.constraint";s:10:"service_id";s:21:"validation.constraint";s:18:"service_class_name";s:40:"Drupal\Core\Validation\ConstraintManager";s:27:"service_component_namespace";s:22:"Drupal\Core\Validation";s:10:"type_label";s:21:"validation.constraint";s:15:"alter_hook_name";s:27:"validation_constraint_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:28:"Plugin/Validation/Constraint";s:16:"plugin_interface";N;s:33:"plugin_definition_annotation_name";s:44:"Drupal\Core\Validation\Annotation\Constraint";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:38:"Symfony\Component\Validator\Constraint";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:3:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:25:"The constraint plugin ID.";s:4:"type";s:6:"string";}s:5:"label";a:3:{s:4:"name";s:5:"label";s:11:"description";s:49:"The human-readable name of the constraint plugin.";s:4:"type";s:42:"string|\Drupal\Core\Annotation\Translation";}s:4:"type";a:3:{s:4:"name";s:4:"type";s:11:"description";s:54:"DataType plugin IDs for which this constraint applies.";s:4:"type";s:21:"string|string[]|false";}}s:24:"plugin_interface_methods";a:0:{}}s:12:"views.access";a:17:{s:7:"type_id";s:12:"views.access";s:10:"service_id";s:27:"plugin.manager.views.access";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:12:"views.access";s:15:"alter_hook_name";s:26:"views_plugins_access_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:19:"Plugin/views/access";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsAccess";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:49:"Drupal\views\Plugin\views\access\AccessPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:56:"The base tables on which this access plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:10:"views.area";a:17:{s:7:"type_id";s:10:"views.area";s:10:"service_id";s:25:"plugin.manager.views.area";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:10:"views.area";s:15:"alter_hook_name";s:24:"views_plugins_area_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:17:"Plugin/views/area";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsArea";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:45:"Drupal\views\Plugin\views\area\AreaPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:14:"views.argument";a:17:{s:7:"type_id";s:14:"views.argument";s:10:"service_id";s:29:"plugin.manager.views.argument";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:14:"views.argument";s:15:"alter_hook_name";s:28:"views_plugins_argument_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:21:"Plugin/views/argument";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:37:"Drupal\views\Annotation\ViewsArgument";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:53:"Drupal\views\Plugin\views\argument\ArgumentPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:22:"views.argument_default";a:17:{s:7:"type_id";s:22:"views.argument_default";s:10:"service_id";s:37:"plugin.manager.views.argument_default";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:22:"views.argument_default";s:15:"alter_hook_name";s:36:"views_plugins_argument_default_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:29:"Plugin/views/argument_default";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:44:"Drupal\views\Annotation\ViewsArgumentDefault";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:68:"Drupal\views\Plugin\views\argument_default\ArgumentDefaultPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:24:"views.argument_validator";a:17:{s:7:"type_id";s:24:"views.argument_validator";s:10:"service_id";s:39:"plugin.manager.views.argument_validator";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:24:"views.argument_validator";s:15:"alter_hook_name";s:38:"views_plugins_argument_validator_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:31:"Plugin/views/argument_validator";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:46:"Drupal\views\Annotation\ViewsArgumentValidator";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:72:"Drupal\views\Plugin\views\argument_validator\ArgumentValidatorPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:11:"views.cache";a:17:{s:7:"type_id";s:11:"views.cache";s:10:"service_id";s:26:"plugin.manager.views.cache";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:11:"views.cache";s:15:"alter_hook_name";s:25:"views_plugins_cache_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/views/cache";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsCache";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:47:"Drupal\views\Plugin\views\cache\CachePluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this cache plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:13:"views.display";a:17:{s:7:"type_id";s:13:"views.display";s:10:"service_id";s:28:"plugin.manager.views.display";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:13:"views.display";s:15:"alter_hook_name";s:27:"views_plugins_display_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:20:"Plugin/views/display";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:36:"Drupal\views\Annotation\ViewsDisplay";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:51:"Drupal\views\Plugin\views\display\DisplayPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:14:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"admin";a:3:{s:4:"name";s:5:"admin";s:11:"description";s:39:"The administrative name of the display.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:15:"uses_menu_links";a:3:{s:4:"name";s:15:"uses_menu_links";s:11:"description";s:54:"Whether or not to use hook_menu() to register a route.";s:4:"type";s:4:"bool";}s:10:"uses_route";a:3:{s:4:"name";s:10:"uses_route";s:11:"description";s:54:"Does the display plugin registers routes to the route.";s:4:"type";s:4:"bool";}s:15:"uses_hook_block";a:3:{s:4:"name";s:15:"uses_hook_block";s:11:"description";s:39:"Does the display plugin provide blocks.";s:4:"type";s:4:"bool";}s:26:"contextual_links_locations";a:3:{s:4:"name";s:26:"contextual_links_locations";s:11:"description";s:56:"A list of places where contextual links should be added.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:57:"The base tables on which this display plugin can be used.";s:4:"type";s:5:"array";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:11:"description";s:55:"The theme function used to render the display's output.";s:4:"type";s:6:"string";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:16:"returns_response";a:3:{s:4:"name";s:16:"returns_response";s:11:"description";s:46:"Whether the display returns a response object.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:22:"views.display_extender";a:17:{s:7:"type_id";s:22:"views.display_extender";s:10:"service_id";s:37:"plugin.manager.views.display_extender";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:22:"views.display_extender";s:15:"alter_hook_name";s:36:"views_plugins_display_extender_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:29:"Plugin/views/display_extender";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:44:"Drupal\views\Annotation\ViewsDisplayExtender";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:68:"Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:50:"Whether or not the plugin is selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:18:"views.exposed_form";a:17:{s:7:"type_id";s:18:"views.exposed_form";s:10:"service_id";s:33:"plugin.manager.views.exposed_form";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:18:"views.exposed_form";s:15:"alter_hook_name";s:32:"views_plugins_exposed_form_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:25:"Plugin/views/exposed_form";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:40:"Drupal\views\Annotation\ViewsExposedForm";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:60:"Drupal\views\Plugin\views\exposed_form\ExposedFormPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:8:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:62:"The base tables on which this exposed form plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:11:"views.field";a:17:{s:7:"type_id";s:11:"views.field";s:10:"service_id";s:26:"plugin.manager.views.field";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:11:"views.field";s:15:"alter_hook_name";s:25:"views_plugins_field_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/views/field";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsField";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:47:"Drupal\views\Plugin\views\field\FieldPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:12:"views.filter";a:17:{s:7:"type_id";s:12:"views.filter";s:10:"service_id";s:27:"plugin.manager.views.filter";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:12:"views.filter";s:15:"alter_hook_name";s:26:"views_plugins_filter_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:19:"Plugin/views/filter";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsFilter";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:49:"Drupal\views\Plugin\views\filter\FilterPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:10:"views.join";a:17:{s:7:"type_id";s:10:"views.join";s:10:"service_id";s:25:"plugin.manager.views.join";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:10:"views.join";s:15:"alter_hook_name";s:24:"views_plugins_join_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:17:"Plugin/views/join";s:16:"plugin_interface";s:50:"Drupal\views\Plugin\views\join\JoinPluginInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsJoin";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:45:"Drupal\views\Plugin\views\join\JoinPluginBase";s:17:"base_class_has_di";b:0;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:1:{s:9:"buildJoin";a:3:{s:4:"name";s:9:"buildJoin";s:11:"declaration";s:62:"public function buildJoin($select_query, $table, $view_query);";s:11:"description";s:51:"Builds the SQL for the join this object represents.";}}}s:11:"views.pager";a:17:{s:7:"type_id";s:11:"views.pager";s:10:"service_id";s:26:"plugin.manager.views.pager";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:11:"views.pager";s:15:"alter_hook_name";s:25:"views_plugins_pager_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/views/pager";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsPager";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:47:"Drupal\views\Plugin\views\pager\PagerPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:11:"description";s:53:"The theme function used to render the pager's output.";s:4:"type";s:6:"string";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this pager plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:11:"views.query";a:17:{s:7:"type_id";s:11:"views.query";s:10:"service_id";s:26:"plugin.manager.views.query";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:11:"views.query";s:15:"alter_hook_name";s:25:"views_plugins_query_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/views/query";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsQuery";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:47:"Drupal\views\Plugin\views\query\QueryPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:6:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:18:"views.relationship";a:17:{s:7:"type_id";s:18:"views.relationship";s:10:"service_id";s:33:"plugin.manager.views.relationship";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:18:"views.relationship";s:15:"alter_hook_name";s:32:"views_plugins_relationship_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:25:"Plugin/views/relationship";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:41:"Drupal\views\Annotation\ViewsRelationship";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:61:"Drupal\views\Plugin\views\relationship\RelationshipPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:9:"views.row";a:17:{s:7:"type_id";s:9:"views.row";s:10:"service_id";s:24:"plugin.manager.views.row";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:9:"views.row";s:15:"alter_hook_name";s:23:"views_plugins_row_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:16:"Plugin/views/row";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:32:"Drupal\views\Annotation\ViewsRow";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:43:"Drupal\views\Plugin\views\row\RowPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:11:"description";s:49:"The theme function used to render the row output.";s:4:"type";s:6:"string";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:53:"The base tables on which this row plugin can be used.";s:4:"type";s:5:"array";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:10:"views.sort";a:17:{s:7:"type_id";s:10:"views.sort";s:10:"service_id";s:25:"plugin.manager.views.sort";s:18:"service_class_name";s:39:"Drupal\views\Plugin\ViewsHandlerManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:10:"views.sort";s:15:"alter_hook_name";s:24:"views_plugins_sort_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:17:"Plugin/views/sort";s:16:"plugin_interface";s:47:"Drupal\views\Plugin\views\ViewsHandlerInterface";s:33:"plugin_definition_annotation_name";s:33:"Drupal\views\Annotation\ViewsSort";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:1;s:10:"base_class";s:45:"Drupal\views\Plugin\views\sort\SortPluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:2:{s:5:"value";a:3:{s:4:"name";s:5:"value";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:23:"The annotated class ID.";s:4:"type";s:6:"string";}}s:24:"plugin_interface_methods";a:35:{s:8:"preQuery";a:3:{s:4:"name";s:8:"preQuery";s:11:"declaration";s:27:"public function preQuery();";s:11:"description";s:29:"Run before the view is built.";}s:13:"getEntityType";a:3:{s:4:"name";s:13:"getEntityType";s:11:"declaration";s:32:"public function getEntityType();";s:11:"description";s:48:"Determines the entity type used by this handler.";}s:6:"broken";a:3:{s:4:"name";s:6:"broken";s:11:"declaration";s:25:"public function broken();";s:11:"description";s:64:"Determines if the handler is considered 'broken', meaning it's a";}s:13:"ensureMyTable";a:3:{s:4:"name";s:13:"ensureMyTable";s:11:"declaration";s:32:"public function ensureMyTable();";s:11:"description";s:68:"Ensure the main table for this handler is in the query. This is used";}s:6:"access";a:3:{s:4:"name";s:6:"access";s:11:"declaration";s:71:"public function access(\Drupal\Core\Session\AccountInterface $account);";s:11:"description";s:52:"Check whether given user has access to this handler.";}s:7:"getJoin";a:3:{s:4:"name";s:7:"getJoin";s:11:"declaration";s:26:"public function getJoin();";s:11:"description";s:57:"Get the join object that should be used for this handler.";}s:13:"sanitizeValue";a:3:{s:4:"name";s:13:"sanitizeValue";s:11:"declaration";s:52:"public function sanitizeValue($value, $type = NULL);";s:11:"description";s:30:"Sanitize the value for output.";}s:12:"getTableJoin";a:3:{s:4:"name";s:12:"getTableJoin";s:11:"declaration";s:57:"public static function getTableJoin($table, $base_table);";s:11:"description";s:75:"Fetches a handler to join one table to a primary table from the data cache.";}s:8:"getField";a:3:{s:4:"name";s:8:"getField";s:11:"declaration";s:40:"public function getField($field = NULL);";s:11:"description";s:44:"Shortcut to get a handler's raw field value.";}s:11:"postExecute";a:3:{s:4:"name";s:11:"postExecute";s:11:"declaration";s:38:"public function postExecute(&$values);";s:11:"description";s:60:"Run after the view is executed, before the result is cached.";}s:14:"showExposeForm";a:3:{s:4:"name";s:14:"showExposeForm";s:11:"declaration";s:89:"public function showExposeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:45:"Shortcut to display the exposed options form.";}s:15:"setRelationship";a:3:{s:4:"name";s:15:"setRelationship";s:11:"declaration";s:34:"public function setRelationship();";s:11:"description";s:73:"Called just prior to query(), this lets a handler set up any relationship";}s:10:"adminLabel";a:3:{s:4:"name";s:10:"adminLabel";s:11:"declaration";s:43:"public function adminLabel($short = FALSE);";s:11:"description";s:59:"Return a string representing this handler's name in the UI.";}s:11:"breakString";a:3:{s:4:"name";s:11:"breakString";s:11:"declaration";s:61:"public static function breakString($str, $force_int = FALSE);";s:11:"description";s:37:"Breaks x,y,z and x+y+z into an array.";}s:12:"adminSummary";a:3:{s:4:"name";s:12:"adminSummary";s:11:"declaration";s:31:"public function adminSummary();";s:11:"description";s:44:"Provide text for the administrative summary.";}s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:11:"views.style";a:17:{s:7:"type_id";s:11:"views.style";s:10:"service_id";s:26:"plugin.manager.views.style";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:11:"views.style";s:15:"alter_hook_name";s:25:"views_plugins_style_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:18:"Plugin/views/style";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:34:"Drupal\views\Annotation\ViewsStyle";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:47:"Drupal\views\Plugin\views\style\StylePluginBase";s:17:"base_class_has_di";b:1;s:17:"plugin_properties";a:9:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:4:"help";a:3:{s:4:"name";s:4:"help";s:11:"description";s:55:"A short help string; this is displayed in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:11:"description";s:51:"The theme function used to render the style output.";s:4:"type";s:6:"string";}s:13:"display_types";a:3:{s:4:"name";s:13:"display_types";s:11:"description";s:54:"The types of the display this plugin can be used with.";s:4:"type";s:5:"array";}s:4:"base";a:3:{s:4:"name";s:4:"base";s:11:"description";s:55:"The base tables on which this style plugin can be used.";s:4:"type";s:5:"array";}s:5:"no_ui";a:3:{s:4:"name";s:5:"no_ui";s:11:"description";s:54:"Whether the plugin should be not selectable in the UI.";s:4:"type";s:4:"bool";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}s:12:"views.wizard";a:18:{s:7:"type_id";s:12:"views.wizard";s:10:"service_id";s:27:"plugin.manager.views.wizard";s:18:"service_class_name";s:38:"Drupal\views\Plugin\ViewsPluginManager";s:27:"service_component_namespace";s:12:"Drupal\views";s:10:"type_label";s:12:"views.wizard";s:15:"alter_hook_name";s:26:"views_plugins_wizard_alter";s:9:"discovery";s:52:"Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery";s:6:"subdir";s:19:"Plugin/views/wizard";s:16:"plugin_interface";s:46:"Drupal\views\Plugin\views\ViewsPluginInterface";s:33:"plugin_definition_annotation_name";s:35:"Drupal\views\Annotation\ViewsWizard";s:16:"yaml_file_suffix";N;s:15:"yaml_properties";N;s:18:"annotation_id_only";b:0;s:10:"base_class";s:49:"Drupal\views\Plugin\views\wizard\WizardPluginBase";s:17:"base_class_has_di";b:1;s:12:"construction";a:2:{i:0;a:3:{s:4:"type";s:48:"Drupal\Core\Entity\EntityTypeBundleInfoInterface";s:4:"name";s:19:"bundle_info_service";s:10:"extraction";s:42:"$container->get('entity_type.bundle.info')";}i:1;a:3:{s:4:"type";s:48:"Drupal\Core\Menu\MenuParentFormSelectorInterface";s:4:"name";s:20:"parent_form_selector";s:10:"extraction";s:44:"$container->get('menu.parent_form_selector')";}}s:17:"plugin_properties";a:5:{s:2:"id";a:3:{s:4:"name";s:2:"id";s:11:"description";s:14:"The plugin ID.";s:4:"type";s:6:"string";}s:5:"title";a:3:{s:4:"name";s:5:"title";s:11:"description";s:38:"The plugin title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:11:"short_title";a:3:{s:4:"name";s:11:"short_title";s:11:"description";s:48:"(optional) The short title used in the views UI.";s:4:"type";s:35:"\Drupal\Core\Annotation\Translation";}s:10:"base_table";a:3:{s:4:"name";s:10:"base_table";s:11:"description";s:45:"The base tables on which this wizard is used.";s:4:"type";s:5:"array";}s:14:"register_theme";a:3:{s:4:"name";s:14:"register_theme";s:11:"description";s:58:"Whether or not to register a theme function automatically.";s:4:"type";s:4:"bool";}}s:24:"plugin_interface_methods";a:20:{s:11:"getProvider";a:3:{s:4:"name";s:11:"getProvider";s:11:"declaration";s:30:"public function getProvider();";s:11:"description";s:28:"Returns the plugin provider.";}s:11:"pluginTitle";a:3:{s:4:"name";s:11:"pluginTitle";s:11:"declaration";s:30:"public function pluginTitle();";s:11:"description";s:46:"Return the human readable name of the display.";}s:11:"usesOptions";a:3:{s:4:"name";s:11:"usesOptions";s:11:"declaration";s:30:"public function usesOptions();";s:11:"description";s:33:"Returns the usesOptions property.";}s:22:"filterByDefinedOptions";a:3:{s:4:"name";s:22:"filterByDefinedOptions";s:11:"declaration";s:56:"public function filterByDefinedOptions(array &$storage);";s:11:"description";s:59:"Filter out stored options depending on the defined options.";}s:19:"validateOptionsForm";a:3:{s:4:"name";s:19:"validateOptionsForm";s:11:"declaration";s:94:"public function validateOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:26:"Validate the options form.";}s:12:"summaryTitle";a:3:{s:4:"name";s:12:"summaryTitle";s:11:"declaration";s:31:"public function summaryTitle();";s:11:"description";s:51:"Returns the summary of the settings in the display.";}s:26:"preRenderAddFieldsetMarkup";a:3:{s:4:"name";s:26:"preRenderAddFieldsetMarkup";s:11:"declaration";s:63:"public static function preRenderAddFieldsetMarkup(array $form);";s:11:"description";s:61:"Moves form elements into fieldsets for presentation purposes.";}s:6:"create";a:3:{s:4:"name";s:6:"create";s:11:"declaration";s:154:"public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);";s:11:"description";s:13:"{@inheritdoc}";}s:4:"init";a:3:{s:4:"name";s:4:"init";s:11:"declaration";s:144:"public function init(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\display\DisplayPluginBase $display, array &$options = NULL);";s:11:"description";s:22:"Initialize the plugin.";}s:17:"submitOptionsForm";a:3:{s:4:"name";s:17:"submitOptionsForm";s:11:"declaration";s:92:"public function submitOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:49:"Handle any special handling on the validate form.";}s:15:"globalTokenForm";a:3:{s:4:"name";s:15:"globalTokenForm";s:11:"declaration";s:90:"public function globalTokenForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:50:"Adds elements for available core tokens to a form.";}s:24:"getAvailableGlobalTokens";a:3:{s:4:"name";s:24:"getAvailableGlobalTokens";s:11:"declaration";s:79:"public function getAvailableGlobalTokens($prepared = FALSE, array $types = []);";s:11:"description";s:49:"Returns an array of available token replacements.";}s:20:"preRenderFlattenData";a:3:{s:4:"name";s:20:"preRenderFlattenData";s:11:"declaration";s:51:"public static function preRenderFlattenData($form);";s:11:"description";s:40:"Flattens the structure of form elements.";}s:18:"globalTokenReplace";a:3:{s:4:"name";s:18:"globalTokenReplace";s:11:"declaration";s:70:"public function globalTokenReplace($string = '', array $options = []);";s:11:"description";s:47:"Returns a string with any core tokens replaced.";}s:7:"destroy";a:3:{s:4:"name";s:7:"destroy";s:11:"declaration";s:26:"public function destroy();";s:11:"description";s:16:"Clears a plugin.";}s:8:"validate";a:3:{s:4:"name";s:8:"validate";s:11:"declaration";s:27:"public function validate();";s:11:"description";s:53:"Validate that the plugin is correct and can be saved.";}s:5:"query";a:3:{s:4:"name";s:5:"query";s:11:"declaration";s:24:"public function query();";s:11:"description";s:48:"Add anything to the query that we might need to.";}s:13:"unpackOptions";a:3:{s:4:"name";s:13:"unpackOptions";s:11:"declaration";s:99:"public function unpackOptions(&$storage, $options, $definition = NULL, $all = TRUE, $check = TRUE);";s:11:"description";s:68:"Unpack options over our existing defaults, drilling down into arrays";}s:16:"buildOptionsForm";a:3:{s:4:"name";s:16:"buildOptionsForm";s:11:"declaration";s:91:"public function buildOptionsForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state);";s:11:"description";s:47:"Provide a form to edit options for this plugin.";}s:14:"themeFunctions";a:3:{s:4:"name";s:14:"themeFunctions";s:11:"declaration";s:33:"public function themeFunctions();";s:11:"description";s:67:"Provide a full list of possible theme templates used by this style.";}}}}